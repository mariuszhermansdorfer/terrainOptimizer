<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RoboSharp</name>
    </assembly>
    <members>
        <member name="M:RoboSharp.ApplicationConstants.#cctor">
            <summary>
            The static constructor for the class to take care of any setup / fixes required before running any operations.
            </summary>
        </member>
        <member name="P:RoboSharp.ApplicationConstants.Initializer">
            <summary> Request this null object used to ensure the static constructor executes </summary>
        </member>
        <member name="T:RoboSharp.AuthenticationResult">
            <summary>
            The return value of an Authentication attempt
            </summary>
        </member>
        <member name="M:RoboSharp.AuthenticationResult.#ctor(System.Boolean,RoboSharp.CommandErrorEventArgs)">
            <summary>
            The constructor used to create a new authentication result
            </summary>
        </member>
        <member name="P:RoboSharp.AuthenticationResult.Success">
            <summary><see langword="true"/> if both the source and destination are accessible, otherwise <see langword="false"/></summary>
        </member>
        <member name="P:RoboSharp.AuthenticationResult.CommandErrorArgs">
            <summary>The Command Error args that result from the authentication attempt </summary>
            <remarks>This is only expected to have a value when <see cref="P:RoboSharp.AuthenticationResult.Success"/> == <see langword="false"/></remarks>
        </member>
        <member name="T:RoboSharp.Authentication">
            <summary>
            Provider to allow IRoboCommands to authenticate against remote servers and check existence of source/destination directories
            </summary>
        </member>
        <member name="M:RoboSharp.Authentication.AuthenticateSourceAndDestination(RoboSharp.Interfaces.IRoboCommand,System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.Authentication.Authenticate(System.String,System.String,System.String,RoboSharp.Interfaces.IRoboCommand,RoboSharp.Authentication.AuthenticationDelegate)"/>
            <inheritdoc cref="M:RoboSharp.Authentication.CheckSourceAndDestinationDirectories(RoboSharp.Interfaces.IRoboCommand)"/>
        </member>
        <member name="M:RoboSharp.Authentication.AuthenticateSource(RoboSharp.Interfaces.IRoboCommand,System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.Authentication.Authenticate(System.String,System.String,System.String,RoboSharp.Interfaces.IRoboCommand,RoboSharp.Authentication.AuthenticationDelegate)"/>
            <inheritdoc cref="M:RoboSharp.Authentication.CheckSourceDirectory(RoboSharp.Interfaces.IRoboCommand)"/>
        </member>
        <member name="M:RoboSharp.Authentication.AuthenticateDestination(RoboSharp.Interfaces.IRoboCommand,System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.Authentication.Authenticate(System.String,System.String,System.String,RoboSharp.Interfaces.IRoboCommand,RoboSharp.Authentication.AuthenticationDelegate)"/>
            <inheritdoc cref="M:RoboSharp.Authentication.CheckDestinationDirectory(RoboSharp.Interfaces.IRoboCommand)"/>
        </member>
        <member name="M:RoboSharp.Authentication.AuthenticateJobFileSavePath(RoboSharp.Interfaces.IRoboCommand,System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.Authentication.Authenticate(System.String,System.String,System.String,RoboSharp.Interfaces.IRoboCommand,RoboSharp.Authentication.AuthenticationDelegate)"/>
            <inheritdoc cref="M:RoboSharp.Authentication.CheckJobFileSavePath(RoboSharp.Interfaces.IRoboCommand)"/>
        </member>
        <member name="M:RoboSharp.Authentication.Authenticate(System.String,System.String,System.String,RoboSharp.Interfaces.IRoboCommand,RoboSharp.Authentication.AuthenticationDelegate)">
            <summary>
            Authenticate against a remote server using the supplied strings. 
            </summary>
            <param name="domain">The authentication domain, if any</param>
            <param name="username">The username to use for authentication - without this value no authentication will occur</param>
            <param name="password">The password if one is required</param>
            <param name="command">The IRobocommand that will provide the source/destination folder paths to evaluate during its authentication</param>
            <param name="auth">The action to perform during authentication</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:RoboSharp.Authentication.CheckSourceAndDestinationDirectories(RoboSharp.Interfaces.IRoboCommand)">
            <remarks>
            <inheritdoc cref="M:RoboSharp.Authentication.CheckSourceDirectory(RoboSharp.Interfaces.IRoboCommand)" path="/remarks"/> <br/>
            <inheritdoc cref="M:RoboSharp.Authentication.CheckDestinationDirectory(RoboSharp.Interfaces.IRoboCommand)" path="/remarks"/> <br/>
            </remarks>
            <returns><see langword="true"/> if both the source and destination are accessible, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:RoboSharp.Authentication.CheckSourceDirectory(RoboSharp.Interfaces.IRoboCommand)">
            <remarks>
            Check that the source directory exists.
            </remarks>
            <returns><see langword="true"/> if the source is accessible, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:RoboSharp.Authentication.CheckDestinationDirectory(RoboSharp.Interfaces.IRoboCommand)">
            <remarks>
            Check that the destination root directory exists. <br/>
            If not list only, verify that the destination drive has write access.
            </remarks>
            <returns><see langword="true"/> if the destination is accessible, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:RoboSharp.Authentication.CheckJobFileSavePath(RoboSharp.Interfaces.IRoboCommand)">
            <summary>
            Check that you have write access to the JobFile Save Path. Create the destination directory if it does not exist.       
            </summary>
            <returns><see langword="true"/> if the you have write access to the <see cref="P:RoboSharp.JobOptions.FilePath"/>, otherwise <see langword="false"/></returns>
        </member>
        <member name="T:RoboSharp.CopyActionFlags">
            <summary>
            Enum to define the high-level copy action to be taken by RoboCopy process.
            </summary>
        </member>
        <member name="F:RoboSharp.CopyActionFlags.Default">
            <summary>
            Default Functionality is to only copy the files within the source directory - does not copy any files within the subfolders.
            </summary>
        </member>
        <member name="F:RoboSharp.CopyActionFlags.CopySubdirectories">
            <inheritdoc cref="P:RoboSharp.CopyOptions.CopySubdirectories"/>
        </member>
        <member name="F:RoboSharp.CopyActionFlags.CopySubdirectoriesIncludingEmpty">
            <inheritdoc cref="P:RoboSharp.CopyOptions.CopySubdirectoriesIncludingEmpty"/>
        </member>
        <member name="F:RoboSharp.CopyActionFlags.Purge">
            <inheritdoc cref="P:RoboSharp.CopyOptions.Purge"/>
        </member>
        <member name="F:RoboSharp.CopyActionFlags.CreateDirectoryAndFileTree">
            <inheritdoc cref="P:RoboSharp.CopyOptions.CreateDirectoryAndFileTree"/>
        </member>
        <member name="F:RoboSharp.CopyActionFlags.MoveFiles">
            <inheritdoc cref="P:RoboSharp.CopyOptions.MoveFiles"/>
        </member>
        <member name="F:RoboSharp.CopyActionFlags.MoveFilesAndDirectories">
            <inheritdoc cref="P:RoboSharp.CopyOptions.MoveFilesAndDirectories"/>
        </member>
        <member name="F:RoboSharp.CopyActionFlags.Mirror">
            <inheritdoc cref="P:RoboSharp.CopyOptions.Mirror"/>
        </member>
        <member name="F:RoboSharp.CopyActionFlags.Compress">
            <inheritdoc cref="P:RoboSharp.CopyOptions.Compress"/>
        </member>
        <member name="T:RoboSharp.CopyOptions">
            <summary>
            Source, Destination, and options for how to move or copy files.
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/CopyOptions"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.CopyOptions.#ctor">
            <summary>
            Create new CopyOptions with Default Settings
            </summary>
        </member>
        <member name="M:RoboSharp.CopyOptions.#ctor(System.String,System.String,RoboSharp.CopyActionFlags)">
            <summary>
            Create a new CopyOptions object with the provided settings
            </summary>
            <param name="source"><inheritdoc cref="P:RoboSharp.CopyOptions.Source" path="*"/></param>
            <param name="destination"><inheritdoc cref="P:RoboSharp.CopyOptions.Destination" path="*"/></param>
            <param name="flags"><inheritdoc cref="T:RoboSharp.CopyActionFlags" path="*"/></param>
        </member>
        <member name="M:RoboSharp.CopyOptions.#ctor(RoboSharp.CopyOptions,System.String,System.String)">
            <summary>
            Clone a CopyOptions Object
            </summary>
            <param name="copyOptions">CopyOptions object to clone</param>
            <param name="NewSource">Specify a new source if desired. If left as null, will use Source from <paramref name="copyOptions"/></param>
            <param name="NewDestination">Specify a new source if desired. If left as null, will use Destination from <paramref name="copyOptions"/></param>
        </member>
        <member name="M:RoboSharp.CopyOptions.Clone(System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.CopyOptions.#ctor(RoboSharp.CopyOptions,System.String,System.String)"/>
        </member>
        <member name="F:RoboSharp.CopyOptions.DefaultFileFilter">
            <summary>
            The Default File Filter used that will allow copying of all files
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.Source">
            <summary>
            The source folder path where the RoboCommand is copying files from.
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.Destination">
            <summary> 
            The destination folder path where the RoboCommand is copying files to. 
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.FileFilter">
            <summary>
            Allows you to supply a set of files to copy or use wildcard characters (* or ?).
            <para/> * = wildcard, any number of characters.
            <br/> ? = wildcard, single character.
            </summary>
            <remarks>JobOptions file saves these into the /IF (Include Files) section</remarks>
        </member>
        <member name="P:RoboSharp.CopyOptions.CopySubdirectories">
            <summary>
            Copies subdirectories. Note that this option excludes empty directories.
            [/S]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.CopySubdirectoriesIncludingEmpty">
            <summary>
            Copies subdirectories. Note that this option includes empty directories.
            [/E]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.Depth">
            <summary>
            Copies only the top N levels of the source directory tree. The default is
            zero which does not limit the depth.
            [/LEV:N]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.EnableRestartMode">
            <summary>
            Copies files in Restart mode.
            [/Z]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.EnableBackupMode">
            <summary>
            Copies files in Backup mode.
            [/B]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.EnableRestartModeWithBackupFallback">
            <summary>
            Uses Restart mode. If access is denied, this option uses Backup mode.
            [/ZB]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.UseUnbufferedIo">
            <summary>
            Copy using unbuffered I/O (recommended for large files).
            [/J]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.EnableEfsRawMode">
            <summary>
            Copies all encrypted files in EFS RAW mode.
            [/EFSRAW]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.Compress">
            <summary>
            Requests network compression during file transfer, if applicable.
            [/COMPRESS]
            </summary>
            <remarks>
            Compression became available in Windows 10 / Server2019 build 20206. Earlier than that and this flag will cause robocopy to report an Invalid Parameter.
            <br/>Due to that, this option has been safeguarded by the static <see cref="P:RoboSharp.CopyOptions.CanEnableCompression"/> property.</remarks>
        </member>
        <member name="P:RoboSharp.CopyOptions.CanEnableCompression">
            <summary>
            Value indicating if the current system supports robocopy using the <see cref="P:RoboSharp.CopyOptions.Compress"/> function. 
            </summary>
            <remarks>Value can be forced via <see cref="M:RoboSharp.CopyOptions.SetCanEnableCompression(System.Boolean)"/>, or tested via <see cref="M:RoboSharp.CopyOptions.TestCompressionFlag(System.String,System.String,System.Boolean,RoboSharp.RoboSharpConfiguration,System.String,System.String,System.String)"/> </remarks>
        </member>
        <member name="M:RoboSharp.CopyOptions.SetCanEnableCompression(System.Boolean)">
            <summary>Update the value of <see cref="P:RoboSharp.CopyOptions.CanEnableCompression"/></summary>
            <param name="value"><see langword="true"/> if you wish to permit using the /COMPRESS flag. <see langword="false"/> if you wish to prevent usage of the flag.</param>
        </member>
        <member name="M:RoboSharp.CopyOptions.TestCompressionFlag(System.String,System.String,System.Boolean,RoboSharp.RoboSharpConfiguration,System.String,System.String,System.String)">
            <summary>
            Run a RoboCommand that has the /COMPRESS /ListOnly /QUIT options enabled as to test the ability to enable the /COMPRESS flag in other commands. 
            <br/>No items will be moved or copied as part of this test.
            </summary>
            <param name="source">The source supplied to the test command</param>
            <param name="dest">The destination supplied to the test command</param>
            <param name="updateCanEnableCompression">When <see langword="true"/>, updates <see cref="P:RoboSharp.CopyOptions.CanEnableCompression"/> with the result.</param>
            <param name="configuration">The configuration to use for the test. If not specified, uses the default configuration.</param>
            <returns>A task that returns <see langword="true"/> if the command supported compression, otherwise false.</returns>
            <inheritdoc cref="M:RoboSharp.Authentication.Authenticate(System.String,System.String,System.String,RoboSharp.Interfaces.IRoboCommand,RoboSharp.Authentication.AuthenticationDelegate)"/>
            <param name="domain"/><param name="username"/><param name="password"/>
        </member>
        <member name="P:RoboSharp.CopyOptions.CopyFlags">
             <summary>
             This property should be set to a string consisting of all the flags to include (eg. DAT; DATSOU)
             Specifies the file properties to be copied. The following are the valid values for this option:
            D Data
            A Attributes
            T Time stamps
            S NTFS access control list (ACL)
            O Owner information
            U Auditing information
            The default value for copyflags is DAT (data, attributes, and time stamps).
            [/COPY:copyflags]
             </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.CopyFilesWithSecurity">
            <summary>
            Copies files with security (equivalent to /copy:DAT).
            [/SEC]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.CopyAll">
            <summary>
            Copies all file information (equivalent to /copy:DATSOU).
            [/COPYALL]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.RemoveFileInformation">
            <summary>
            Copies no file information (useful with Purge option).
            [/NOCOPY]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.FixFileSecurityOnAllFiles">
            <summary>
            Fixes file security on all files, even skipped ones.
            [/SECFIX]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.FixFileTimesOnAllFiles">
            <summary>
            Fixes file times on all files, even skipped ones.
            [/TIMFIX]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.Purge">
            <summary>
            Deletes destination files and directories that no longer exist in the source.
            [/PURGE]
            </summary>
            <remarks>
            Using this option with the <see cref="P:RoboSharp.CopyOptions.CopySubdirectoriesIncludingEmpty"/> option allows the destination directory security settings to not be overwritten.
            </remarks>
        </member>
        <member name="P:RoboSharp.CopyOptions.Mirror">
            <summary>
            Mirrors a directory tree (equivalent to CopySubdirectoriesIncludingEmpty plus Purge).
            [/MIR]
            </summary>
            <remarks>Using this option with the <see cref="P:RoboSharp.CopyOptions.CopySubdirectoriesIncludingEmpty"/> overwrites the destination directory security settings.</remarks>
        </member>
        <member name="P:RoboSharp.CopyOptions.MoveFiles">
            <summary>
            Moves files, and deletes them from the source after they are copied.
            [/MOV]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.MoveFilesAndDirectories">
            <summary>
            Moves files and directories, and deletes them from the source after they are copied.
            [/MOVE]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.AddAttributes">
            <summary>
            This property should be set to a string consisting of all the attributes to add (eg. AH; RASHCNET).
            Adds the specified attributes to copied files.
            [/A+:attributes]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.RemoveAttributes">
            <summary>
            This property should be set to a string consisting of all the attributes to remove (eg. AH; RASHCNET).
            Removes the specified attributes from copied files.
            [/A-:attributes]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.CreateDirectoryAndFileTree">
            <summary>
            Creates a directory tree and zero-length files only.
            [/CREATE]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.FatFiles">
            <summary>
            Creates destination files by using 8.3 character-length FAT file names only.
            [/FAT]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.TurnLongPathSupportOff">
            <summary>
            Turns off support for very long paths (longer than 256 characters).
            [/256]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.MonitorSourceChangesLimit">
            <summary>
            The default value of zero indicates that you do not wish to monitor for changes.
            Monitors the source, and runs again when more than N changes are detected.
            [/MON:N]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.MonitorSourceTimeLimit">
            <summary>
            The default value of zero indicates that you do not wish to monitor for changes.
            Monitors source, and runs again in M minutes if changes are detected.
            [/MOT:M]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.RunHours">
            <summary>
            Specifies run times when new copies may be started. ( Copy Operation is scheduled to only operate within specified timeframe )
            [/rh:hhmm-hhmm] <br/>
            If copy operation is unfinished, robocopy will remain active in idle state until the specified time, at which it will resume copying.<br/>
            Must be in correct format. Incorrectly formatted strings will be ignored.  <para/>
            Examples:<br/>
            1500-1800 -> Robocopy will only copy between 3 PM and 5 PM <br/>
            0015-0530 -> Robocopy will only copy between 12:15 AM and 5:30 AM <br/>
            </summary>
            <remarks>
            If this is set up, then the robocopy process will remain active after the program exits if the calling asemmbly does not call <see cref="M:RoboSharp.RoboCommand.Stop"/> prior to exiting the application.
            </remarks>
        </member>
        <member name="P:RoboSharp.CopyOptions.CheckPerFile">
            <summary>
            Checks the scheduled /RH (run hours) per file instead of per pass.
            [/PF]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.InterPacketGap">
            <summary>
            The default value of zero indicates that this feature is turned off.
            Specifies the inter-packet gap to free bandwidth on slow lines.
            [/IPG:N]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.CopySymbolicLink">
            <summary>
            Copies the symbolic link instead of the target.
            [/SL]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.MultiThreadedCopiesCount">
            <summary>
            The default value of zero indicates that this feature is turned off.
            Creates multi-threaded copies with N threads. Must be an integer between 1 and 128.
            The MultiThreadedCopiesCount parameter cannot be used with the /IPG and EnableEfsRawMode parameters.
            [/MT:N]
            </summary>
            <remarks>
            Settings this value to anything other than 0 causes RoboCopy to force the following options: 
            <br/> - <see cref="P:RoboSharp.LoggingOptions.NoDirectoryList"/>
            <br/> - <see cref="P:RoboSharp.LoggingOptions.IncludeFullPathNames"/>
            </remarks>
        </member>
        <member name="P:RoboSharp.CopyOptions.DirectoryCopyFlags">
            <summary>
            What to copy for directories (default is DA).
            (copyflags: D=Data, A=Attributes, T=Timestamps).
            [/DCOPY:copyflags]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.DoNotCopyDirectoryInfo">
            <summary>
            Do not copy any directory info.
            [/NODCOPY]
            </summary>
        </member>
        <member name="P:RoboSharp.CopyOptions.DoNotUseWindowsCopyOffload">
            <summary>
            Copy files without using the Windows Copy Offload mechanism.
            [/NOOFFLOAD]
            </summary>
        </member>
        <member name="M:RoboSharp.CopyOptions.WrapPath(System.String)">
            <summary>
            Used by the Parse method to sanitize path for the command options.<br/>
            Evaluate the path. If needed, wrap it in quotes.  <br/>
            If the path ends in a DirectorySeperatorChar, santize it to work as expected. <br/>
            </summary>
            <param name="path"></param>
            <returns>Each return string includes a space at the end of the string to seperate it from the next option variable.</returns>
        </member>
        <member name="M:RoboSharp.CopyOptions.Parse(System.Boolean)">
            <summary>
            Parse the class properties and generate the command arguments
            </summary>
            <param name="optionsOnly">When <see langword="true"/> only returns the options tags, similar to how robocopy would display them. (omits the source/destination)</param>
        </member>
        <member name="M:RoboSharp.CopyOptions.ToString">
            <summary>
            Returns the Parsed Options as it would be applied to RoboCopy
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.CopyOptions.GetRunHours_StartTime">
            <summary>
            Get the StartTime portion of <see cref="P:RoboSharp.CopyOptions.RunHours"/>
            </summary>
            <returns>hhmm or String.Empty</returns>
        </member>
        <member name="M:RoboSharp.CopyOptions.GetRunHours_EndTime">
            <summary>
            Get the EndTime portion of <see cref="P:RoboSharp.CopyOptions.RunHours"/>
            </summary>
            <returns>hhmm or String.Empty</returns>
        </member>
        <member name="M:RoboSharp.CopyOptions.IsRunHoursStringValid(System.String)">
            <summary>
            Method to check if some string is valid for use as with the <see cref="P:RoboSharp.CopyOptions.RunHours"/> property.
            </summary>
            <param name="runHours"></param>
            <returns>True if correct format, otherwise false</returns>
        </member>
        <member name="M:RoboSharp.CopyOptions.CheckRunHoursString(System.String)">
            <inheritdoc cref="M:RoboSharp.CopyOptions.IsRunHoursStringValid(System.String)"/>
        </member>
        <member name="M:RoboSharp.CopyOptions.AddFileFilter(System.String[])">
            <summary>
            Add file filters to the <see cref="P:RoboSharp.CopyOptions.FileFilter"/> property.
            <para/> Note: If the FileFilter contains only <see cref="F:RoboSharp.CopyOptions.DefaultFileFilter"/>, it will be replaced with the new collection.
            <br/>Otherwise, the <paramref name="filters"/> will be added to the collection.
            </summary>
            <param name="filters"><inheritdoc cref="P:RoboSharp.CopyOptions.FileFilter" path="/summary"/></param>
        </member>
        <member name="M:RoboSharp.CopyOptions.ApplyActionFlags(RoboSharp.CopyActionFlags)">
            <summary>
            Apply the <see cref="T:RoboSharp.CopyActionFlags"/> to the command
            </summary>
            <param name="flags">Options to apply</param>
        </member>
        <member name="M:RoboSharp.CopyOptions.GetCopyActionFlags">
            <summary>
            Get the <see cref="T:RoboSharp.CopyActionFlags"/> representation of this object
            </summary>
        </member>
        <member name="M:RoboSharp.CopyOptions.SetAddAttributes(System.Nullable{System.IO.FileAttributes})">
            <summary>Set the <see cref="P:RoboSharp.CopyOptions.AddAttributes"/> property </summary>
            <param name="AttributesToAdd"><inheritdoc cref="M:RoboSharp.SelectionOptions.ConvertFileAttrToString(System.Nullable{System.IO.FileAttributes})"/></param>
        </member>
        <member name="M:RoboSharp.CopyOptions.SetRemoveAttributes(System.Nullable{System.IO.FileAttributes})">
            <summary>Set the <see cref="P:RoboSharp.CopyOptions.RemoveAttributes"/> property </summary>
            <param name="AttributesToRemove"><inheritdoc cref="M:RoboSharp.SelectionOptions.ConvertFileAttrToString(System.Nullable{System.IO.FileAttributes})"/></param>
        </member>
        <member name="M:RoboSharp.CopyOptions.GetAddAttributes">
            <summary> Get the FileAttributes enum representation of <see cref="P:RoboSharp.SelectionOptions.IncludeAttributes"/></summary>
            <returns>If not specified, return null. Otherwise return the file attributes to include.</returns>
        </member>
        <member name="M:RoboSharp.CopyOptions.GetRemoveAttributes">
            <summary> Get the FileAttributes enum representation of <see cref="P:RoboSharp.SelectionOptions.ExcludeAttributes"/></summary>
            <returns>If not specified, return null. Otherwise return the file attributes to include.</returns>
        </member>
        <member name="M:RoboSharp.CopyOptions.Merge(RoboSharp.CopyOptions)">
            <summary>
            Combine this object with another CopyOptions object. <br/>
            Any properties marked as true take priority. IEnumerable items are combined. 
            </summary>
            <remarks>
            Source and Destination are only taken from the merged item if this object's Source/Destination values are null/empty. <br/>
            RunHours follows the same rules.
            
            </remarks>
            <param name="copyOptions"></param>
        </member>
        <member name="T:RoboSharp.DefaultConfigurations.RoboSharpConfig_EN">
            <summary>
            This is the Default Configuration class to use
            </summary>
        </member>
        <member name="T:RoboSharp.CommandErrorEventArgs">
            <summary>
            Describes an error that occured when generating the command
            </summary>
        </member>
        <member name="P:RoboSharp.CommandErrorEventArgs.Error">
            <summary>
            Error Description
            </summary>
        </member>
        <member name="P:RoboSharp.CommandErrorEventArgs.Exception">
            <summary>
            If this CommandErrorEventArgs object was created in response to an exception, that exception is captured here. <br/>
            If no exception was thrown, this property will be null.
            </summary>
        </member>
        <member name="M:RoboSharp.CommandErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            <inheritdoc cref="T:RoboSharp.CommandErrorEventArgs"/>
            </summary>
            <param name="error"><inheritdoc cref="P:RoboSharp.CommandErrorEventArgs.Error"/></param>
            <param name="ex"><inheritdoc cref="P:RoboSharp.CommandErrorEventArgs.Exception"/></param>
        </member>
        <member name="M:RoboSharp.CommandErrorEventArgs.#ctor(System.Exception)">
            <summary>
            <inheritdoc cref="T:RoboSharp.CommandErrorEventArgs"/>
            </summary>
            <param name="ex">Exception to data to pass to the event handler</param>
        </member>
        <member name="T:RoboSharp.CopyProgressEventArgs">
            <summary>
            Current File Progress reported as <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:RoboSharp.CopyProgressEventArgs.#ctor(System.Double)">
            <summary><inheritdoc cref="T:RoboSharp.CopyProgressEventArgs"/></summary>
            <param name="progress"><inheritdoc cref="P:RoboSharp.CopyProgressEventArgs.CurrentFileProgress"/></param>
        </member>
        <member name="M:RoboSharp.CopyProgressEventArgs.#ctor(System.Double,RoboSharp.ProcessedFileInfo,RoboSharp.ProcessedFileInfo)">
            <summary><inheritdoc cref="T:RoboSharp.CopyProgressEventArgs"/></summary>
            <param name="progress"><inheritdoc cref="P:RoboSharp.CopyProgressEventArgs.CurrentFileProgress"/></param>
            <param name="currentFile"><inheritdoc cref="P:RoboSharp.CopyProgressEventArgs.CurrentFile"/></param>
            <param name="SourceDir"><inheritdoc cref="P:RoboSharp.CopyProgressEventArgs.CurrentDirectory"/></param>
        </member>
        <member name="P:RoboSharp.CopyProgressEventArgs.CurrentFileProgress">
            <summary>
            Current File Progress Percentage
            </summary>
        </member>
        <member name="P:RoboSharp.CopyProgressEventArgs.CurrentFile">
            <inheritdoc cref="T:RoboSharp.ProcessedFileInfo"/>
        </member>
        <member name="P:RoboSharp.CopyProgressEventArgs.CurrentDirectory">
            <summary>
            Contains information about the Last Directory RoboCopy reported into the log. 
            <br/> This may be null.
            </summary>
        </member>
        <member name="T:RoboSharp.ErrorEventArgs">
            <summary>
            Information about an Error reported by the RoboCopy process
            </summary>
        </member>
        <member name="M:RoboSharp.ErrorEventArgs.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ErrorEventArgs.#ctor(System.Exception,System.String,System.DateTime)">
            <summary>
            
            </summary>
            <param name="ex"></param>
            <param name="errorPath"></param>
            <param name="dateTime"></param>
        </member>
        <member name="M:RoboSharp.ErrorEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String)">
            <summary> </summary>
            <param name="error"><inheritdoc cref="P:RoboSharp.ErrorEventArgs.Error" path="*"/></param>
            <param name="errorDescription"><inheritdoc cref="P:RoboSharp.ErrorEventArgs.ErrorDescription" path="*"/></param>
            <param name="errorCode"><inheritdoc cref="P:RoboSharp.ErrorEventArgs.ErrorCode" path="*"/></param>
            <param name="signedErrorCode"><inheritdoc cref="P:RoboSharp.ErrorEventArgs.SignedErrorCode" path="*"/></param>
            <param name="errorPath"><inheritdoc cref="P:RoboSharp.ErrorEventArgs.ErrorPath" path="*"/></param>
            <param name="dateTime"><inheritdoc cref="P:RoboSharp.ErrorEventArgs.DateTime" path="*"/></param>
        </member>
        <member name="P:RoboSharp.ErrorEventArgs.Error">
            <summary>
            Error Code
            </summary>
        </member>
        <member name="P:RoboSharp.ErrorEventArgs.ErrorDescription">
            <summary>
            Error Description
            </summary>
        </member>
        <member name="P:RoboSharp.ErrorEventArgs.ErrorCode">
            <summary>
            Error Code
            </summary>
        </member>
        <member name="P:RoboSharp.ErrorEventArgs.SignedErrorCode">
            <summary>
            Signed Error Code
            </summary>
        </member>
        <member name="P:RoboSharp.ErrorEventArgs.ErrorPath">
            <summary>
            The File or Directory Path the Error refers to
            </summary>
        </member>
        <member name="P:RoboSharp.ErrorEventArgs.DateTime">
            <summary>
            DateTime the error occurred
            </summary>
        </member>
        <member name="M:RoboSharp.ErrorEventArgs.ToString">
            <summary>
            Concatenate the <see cref="P:RoboSharp.ErrorEventArgs.Error"/> and <see cref="P:RoboSharp.ErrorEventArgs.ErrorDescription"/> into a string seperated by an <see cref="P:System.Environment.NewLine"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.ErrorEventArgs.#ctor(System.String,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            <inheritdoc cref="T:RoboSharp.ErrorEventArgs"/>
            </summary>
            <param name="errorData"><inheritdoc cref="P:RoboSharp.ErrorEventArgs.Error"/></param>
            <param name="descripData"><inheritdoc cref="P:RoboSharp.ErrorEventArgs.ErrorCode"/></param>
            <param name="errTokenRegex">
            Regex used to split the Error Code into its various parts. <br/>
            Must have the following groups: Date, ErrCode, SignedErrCode, Descrip, Path
            </param>
        </member>
        <member name="T:RoboSharp.FileProcessedEventArgs">
            <summary>
            <inheritdoc cref="T:RoboSharp.ProcessedFileInfo"/>
            </summary>
        </member>
        <member name="P:RoboSharp.FileProcessedEventArgs.ProcessedFile">
            <inheritdoc cref="T:RoboSharp.ProcessedFileInfo"/>
        </member>
        <member name="M:RoboSharp.FileProcessedEventArgs.#ctor(RoboSharp.ProcessedFileInfo)">
            <inheritdoc cref="M:System.EventArgs.#ctor"/>
        </member>
        <member name="T:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs">
            <summary>
            Event Args provided by IProgressEstimator objects to notify the UI it should refresh the stat values
            </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.DummyArgs">
            <summary> Dummy Args with Values of 0 to perform final updates through ProgressEstimator without creating new args every time</summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.Estimator">
            <summary>
            <inheritdoc cref="T:RoboSharp.Results.ProgressEstimator"/>
            </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.BytesStatistic">
            <inheritdoc cref="P:RoboSharp.Interfaces.IProgressEstimator.BytesStatistic"/>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.FilesStatistic">
            <inheritdoc cref="P:RoboSharp.Interfaces.IProgressEstimator.FilesStatistic"/>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.DirectoriesStatistic">
            <inheritdoc cref="P:RoboSharp.Interfaces.IProgressEstimator.DirectoriesStatistic"/>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.ValueChange_Bytes">
            <summary>IStatistic Object that shows how much was added to the { <see cref="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.BytesStatistic"/> } object during this UI Update</summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.ValueChange_Files">
            <summary>IStatistic Object that shows how much was added to the { <see cref="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.FilesStatistic"/> } object during this UI Update</summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.ValueChange_Directories">
            <summary>IStatistic Object that shows how much was added to the { <see cref="P:RoboSharp.EventArgObjects.IProgressEstimatorUpdateEventArgs.DirectoriesStatistic"/> } object during this UI Update</summary>
        </member>
        <member name="T:RoboSharp.EventArgObjects.ProgressEstimatorCreatedEventArgs">
            <summary>
            Reports that a ProgressEstimator object is now available for binding
            </summary>
        </member>
        <member name="M:RoboSharp.EventArgObjects.ProgressEstimatorCreatedEventArgs.#ctor(RoboSharp.Interfaces.IProgressEstimator)">
            <summary>
            Create new event args for when an <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> generates a new <see cref="T:RoboSharp.Interfaces.IProgressEstimator"/>
            </summary>
            <param name="estimator"></param>
        </member>
        <member name="P:RoboSharp.EventArgObjects.ProgressEstimatorCreatedEventArgs.ResultsEstimate">
            <summary>
            <inheritdoc cref="T:RoboSharp.Results.ProgressEstimator"/>
            </summary>
        </member>
        <member name="T:RoboSharp.EventArgObjects.ResultListUpdatedEventArgs">
            <summary> EventArgs for the <see cref="T:RoboSharp.Results.RoboCopyResultsList.ResultsListUpdated"/> delegate </summary>
        </member>
        <member name="M:RoboSharp.EventArgObjects.ResultListUpdatedEventArgs.#ctor(RoboSharp.Interfaces.IRoboCopyResultsList)">
            <summary> Create the EventArgs for the <see cref="T:RoboSharp.Results.RoboCopyResultsList.ResultsListUpdated"/> delegate </summary>
            <param name="list">Results list to present as an interface</param>
        </member>
        <member name="P:RoboSharp.EventArgObjects.ResultListUpdatedEventArgs.ResultsList">
            <summary>
            Read-Only interface to the List that has been updated.
            </summary>
        </member>
        <member name="T:RoboSharp.EventArgObjects.RoboQueueCommandStartedEventArgs">
            <summary>
            EventArgs to declare when a RoboCommand process starts
            </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.RoboQueueCommandStartedEventArgs.Command">
            <summary>
            Command that started.
            </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.RoboQueueCommandStartedEventArgs.ProgressEstimatorAvailable">
            <summary>
            Returns TRUE if the command's <see cref="T:RoboSharp.Results.ProgressEstimator"/> is available for binding
            </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.RoboQueueCommandStartedEventArgs.StartTime">
            <summary>
            Local time the command started.
            </summary>
        </member>
        <member name="T:RoboSharp.EventArgObjects.RoboQueueCompletedEventArgs">
            <summary>
            EventArgs to declare when a RoboCommand process starts
            </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.RoboQueueCompletedEventArgs.RunResults">
            <summary>
            RoboQueue Results Object
            </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.RoboQueueCompletedEventArgs.CopyOperation">
            <summary>
            TRUE if this run was a COPY OPERATION, FALSE is the results were created after a <see cref="M:RoboSharp.RoboQueue.StartAll_ListOnly(System.String,System.String,System.String)"/> call.
            </summary>
        </member>
        <member name="T:RoboSharp.EventArgObjects.IStatisticPropertyChangedEventArg">
            <summary>
            Interface helper for dealing with Statistic Event Args
            </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IStatisticPropertyChangedEventArg.StatType">
            <inheritdoc cref="P:RoboSharp.Results.Statistic.Type"/>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IStatisticPropertyChangedEventArg.Is_StatChangedEventArg">
            <summary>TRUE if of type <see cref="T:RoboSharp.EventArgObjects.StatChangedEventArg"/>. Otherwise false.</summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IStatisticPropertyChangedEventArg.Is_StatisticPropertyChangedEventArgs">
            <summary>TRUE if of type <see cref="T:RoboSharp.EventArgObjects.StatisticPropertyChangedEventArgs"/>. Otherwise false.</summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.IStatisticPropertyChangedEventArg.PropertyName">
            <inheritdoc cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/>
        </member>
        <member name="T:RoboSharp.EventArgObjects.StatChangedEventArg">
            <summary>
            EventArgs provided by <see cref="T:RoboSharp.Results.Statistic.StatChangedHandler"/> when any individual property gets modified.
            </summary>
            <remarks>
            Under most circumstances, the 'PropertyName' property will detail which parameter has been updated. <br/>
            When the Statistic object has multiple values change via a method call ( Reset / Add / Subtract methods ), then PropertyName will be String.Empty, indicating multiple values have changed. <br/>
            If this is the case, then the <see cref="P:RoboSharp.EventArgObjects.StatChangedEventArg.NewValue"/>, <see cref="P:RoboSharp.EventArgObjects.StatChangedEventArg.OldValue"/>, and <see cref="P:RoboSharp.EventArgObjects.StatChangedEventArg.Difference"/> will report the value from the sender's <see cref="P:RoboSharp.Results.Statistic.Total"/> property.
            </remarks>
        </member>
        <member name="P:RoboSharp.EventArgObjects.StatChangedEventArg.Sender">
            <summary> This is a reference to the Statistic that generated the EventArg object </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.StatChangedEventArg.StatType">
            <inheritdoc cref="P:RoboSharp.Results.Statistic.Type"/>
        </member>
        <member name="P:RoboSharp.EventArgObjects.StatChangedEventArg.OldValue">
            <summary> Old Value of the object </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.StatChangedEventArg.NewValue">
            <summary> Current Value of the object </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.StatChangedEventArg.Difference">
            <summary>
            Result of NewValue - OldValue
            </summary>
        </member>
        <member name="T:RoboSharp.EventArgObjects.StatisticPropertyChangedEventArgs">
            <summary>
            EventArgs provided by <see cref="E:RoboSharp.Results.Statistic.PropertyChanged"/>
            </summary>
            <remarks>
            Under most circumstances, the 'PropertyName' property will detail which parameter has been updated. <br/>
            When the Statistic object has multiple values change via a method call ( Reset / Add / Subtract methods ), then PropertyName will be String.Empty, indicating multiple values have changed. <br/>
            If this is the case, then the <see cref="P:RoboSharp.EventArgObjects.StatChangedEventArg.NewValue"/>, <see cref="P:RoboSharp.EventArgObjects.StatChangedEventArg.OldValue"/>, and <see cref="P:RoboSharp.EventArgObjects.StatChangedEventArg.Difference"/> will report the value from the sender's <see cref="P:RoboSharp.Results.Statistic.Total"/> property.
            </remarks>
        </member>
        <member name="P:RoboSharp.EventArgObjects.StatisticPropertyChangedEventArgs.StatType">
            <inheritdoc cref="P:RoboSharp.Results.Statistic.Type"/>
        </member>
        <member name="P:RoboSharp.EventArgObjects.StatisticPropertyChangedEventArgs.OldValue">
            <summary> Old Value of the object </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.StatisticPropertyChangedEventArgs.NewValue">
            <summary> Current Value of the object </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.StatisticPropertyChangedEventArgs.Difference">
            <summary>
            Result of NewValue - OldValue
            </summary>
        </member>
        <member name="T:RoboSharp.EventArgObjects.TimeSpanEventArgs">
            <summary>
            Provide a base class that includes a StartTime, EndTime and will calculate the TimeSpan in between
            </summary>
        </member>
        <member name="M:RoboSharp.EventArgObjects.TimeSpanEventArgs.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Create New Args
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="P:RoboSharp.EventArgObjects.TimeSpanEventArgs.StartTime">
            <summary>
            Local time the command started.
            </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.TimeSpanEventArgs.EndTime">
            <summary>
            Local time the command stopped.
            </summary>
        </member>
        <member name="P:RoboSharp.EventArgObjects.TimeSpanEventArgs.TimeSpan">
            <summary>
            Length of time the process took to run
            </summary>
        </member>
        <member name="T:RoboSharp.RoboCommandCompletedEventArgs">
            <summary>
            <inheritdoc cref="T:RoboSharp.Results.RoboCopyResults"/>
            </summary>
        </member>
        <member name="M:RoboSharp.RoboCommandCompletedEventArgs.#ctor(RoboSharp.Results.RoboCopyResults)">
            <summary>
            Return the Results object
            </summary>
            <param name="results"></param>
        </member>
        <member name="P:RoboSharp.RoboCommandCompletedEventArgs.Results">
            <inheritdoc cref="T:RoboSharp.Results.RoboCopyResults"/>
        </member>
        <member name="M:RoboSharp.ExtensionMethods.WrapPath(System.String)">
            <summary> Encase the LogPath in quotes if needed </summary>
        </member>
        <member name="M:RoboSharp.ExtensionMethods.IsNullOrWhiteSpace(System.String)">
            <remarks> Extension method provided by RoboSharp package </remarks>
            <inheritdoc cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>
        </member>
        <member name="M:RoboSharp.ExtensionMethods.EndsWithDirectorySeperator(System.String)">
            <summary>
            Check if the string ends with a directory seperator character
            </summary>
        </member>
        <member name="M:RoboSharp.ExtensionMethods.CombineCharArr(System.String,System.String)">
            <summary>
            Convert <paramref name="StrTwo"/> into a char[]. Perform a ForEach( Char in strTwo) loop, and append any characters in Str2 to the end of this string if they don't already exist within this string.
            </summary>
            <param name="StrOne"></param>
            <param name="StrTwo"></param>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.ExtensionMethods.GetGreaterVal(System.Int32,System.Int32)">
            <summary>
            Compare the current value to that of the supplied value, and take the greater of the two.
            </summary>
            <param name="i"></param>
            <param name="i2"></param>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.ExtensionMethods.ReplaceIfEmpty(System.String,System.String)">
            <summary>
            Evaluate this string. If this string is null or empty, replace it with the supplied string.
            </summary>
            <param name="str1"></param>
            <param name="str2"></param>
            <returns></returns>
        </member>
        <member name="T:RoboSharp.ImmutableList`1">
            <summary>
            Collection object that will return a new <see cref="T:RoboSharp.ImmutableList`1"/> on any proposed changes to the underlying collection
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
        </member>
        <member name="P:RoboSharp.ImmutableList`1.Empty">
            <summary>
            Get a new Empty collection
            </summary>
        </member>
        <member name="P:RoboSharp.ImmutableList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:RoboSharp.ImmutableList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:RoboSharp.ImmutableList`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:RoboSharp.ImmutableList`1.Item(System.Int32)">
            <inheritdoc/>    
        </member>
        <member name="M:RoboSharp.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.CopyTo(`0[])">
            <inheritdoc cref="M:System.Collections.Generic.List`1.CopyTo(`0[])"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.IndexOf(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0)"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.IndexOf(`0,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.Find(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.FindAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.FindIndex(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.FindLast(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.Exists(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.ForEach(System.Action{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.GetRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.TrueForAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.LastIndexOf(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.LastIndexOf(`0,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.BinarySearch(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(`0)"/>
        </member>
        <member name="M:RoboSharp.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="T:RoboSharp.Interfaces.IProgressEstimator">
            <summary>
            Object that provides <see cref="T:RoboSharp.Interfaces.IStatistic"/> objects whose events can be bound to report estimated RoboCommand / RoboQueue progress periodically.
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/IProgressEstimator"/>
            </remarks>
        </member>
        <member name="P:RoboSharp.Interfaces.IProgressEstimator.DirectoriesStatistic">
            <summary>
            Estimate of current number of directories processed while the job is still running. <br/>
            Estimate is provided by parsing of the LogLines produces by RoboCopy.
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IProgressEstimator.FilesStatistic">
            <summary>
            Estimate of current number of files processed while the job is still running. <br/>
            Estimate is provided by parsing of the LogLines produces by RoboCopy.
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IProgressEstimator.BytesStatistic">
            <summary>
            Estimate of current number of bytes processed while the job is still running. <br/>
            Estimate is provided by parsing of the LogLines produces by RoboCopy.
            </summary>
        </member>
        <member name="M:RoboSharp.Interfaces.IProgressEstimator.GetExitCode">
            <summary>
            Parse this object's stats into a <see cref="T:RoboSharp.Results.RoboCopyExitCodes"/> enum.
            </summary>
        </member>
        <member name="E:RoboSharp.Interfaces.IProgressEstimator.ValuesUpdated">
            <summary> Event that occurs when this IProgressEstimatorObject's IStatistic values have been updated. </summary>
        </member>
        <member name="T:RoboSharp.Interfaces.IResults">
            <summary>
            Provides <see cref="T:RoboSharp.Interfaces.IStatistic"/> objects for File, Directory, and Bytes to allow comparison between ProgressEstimator and RoboCopyResults objects
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/IResults"/>
            </remarks>
        </member>
        <member name="P:RoboSharp.Interfaces.IResults.DirectoriesStatistic">
            <summary> Information about number of Directories Copied, Skipped, Failed, etc.</summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IResults.FilesStatistic">
            <summary> Information about number of Files Copied, Skipped, Failed, etc.</summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IResults.BytesStatistic">
            <summary> Information about number of Bytes processed.</summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IResults.Status">
            <inheritdoc cref="T:RoboSharp.Results.RoboCopyExitStatus"/>
        </member>
        <member name="T:RoboSharp.Interfaces.IRoboCommand">
            <summary>
            
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/IRoboCommand"/>
            </remarks>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.Name">
            <inheritdoc cref="P:RoboSharp.RoboCommand.Name"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.IsPaused">
            <inheritdoc cref="P:RoboSharp.RoboCommand.IsPaused"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.IsRunning">
            <inheritdoc cref="P:RoboSharp.RoboCommand.IsRunning"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.IsScheduled">
            <inheritdoc cref="P:RoboSharp.RoboCommand.IsScheduled"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.IsCancelled">
            <inheritdoc cref="P:RoboSharp.RoboCommand.IsCancelled"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.StopIfDisposing">
            <inheritdoc cref="P:RoboSharp.RoboCommand.StopIfDisposing"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.IProgressEstimator">
            <inheritdoc cref="P:RoboSharp.RoboCommand.ProgressEstimator"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.CommandOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.CommandOptions"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.CopyOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.CopyOptions"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.SelectionOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.SelectionOptions"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.RetryOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.RetryOptions"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.LoggingOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.LoggingOptions"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.JobOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.JobOptions"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCommand.Configuration">
            <inheritdoc cref="P:RoboSharp.RoboCommand.Configuration"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboCommand.OnFileProcessed">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnFileProcessed"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboCommand.OnCommandError">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnCommandError"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboCommand.OnError">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnError"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboCommand.OnCommandCompleted">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnCommandCompleted"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboCommand.OnCopyProgressChanged">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnCopyProgressChanged"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboCommand.OnProgressEstimatorCreated">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnProgressEstimatorCreated"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboCommand.TaskFaulted">
            <inheritdoc cref="E:RoboSharp.RoboCommand.TaskFaulted"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommand.Pause">
            <inheritdoc cref="M:RoboSharp.RoboCommand.Pause"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommand.Resume">
            <inheritdoc cref="M:RoboSharp.RoboCommand.Resume"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommand.Start(System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.RoboCommand.Start(System.String,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommand.Start_ListOnly(System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.RoboCommand.Start_ListOnly(System.String,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommand.GetResults">
            <inheritdoc cref="M:RoboSharp.RoboCommand.GetResults"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommand.Stop">
            <inheritdoc cref="M:RoboSharp.RoboCommand.Stop"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommand.Dispose">
            <inheritdoc cref="M:RoboSharp.RoboCommand.Dispose"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommand.StartAsync_ListOnly(System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.RoboCommand.StartAsync_ListOnly(System.String,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommand.StartAsync(System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.RoboCommand.StartAsync(System.String,System.String,System.String)"/>
        </member>
        <member name="T:RoboSharp.Interfaces.IRoboCommandFactory">
            <summary>
            Interface for a class factory object to produce <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> objects <br/>
            Usable by consumers to specify a factory object their library can rely on to create classes derived from the <see cref="T:RoboSharp.RoboCommand"/> object. <br/>
            </summary>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommandFactory.GetRoboCommand">
            <summary>
            Create a new <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object using the parameterless constructor
            </summary>
            <returns>
            new <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object
            </returns>
            <inheritdoc cref="M:RoboSharp.RoboCommand.#ctor"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommandFactory.GetRoboCommand(System.String,System.String)">
            <summary>
            Create a new <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> with the specified source and destination
            </summary>
            <param name="source"><inheritdoc cref="P:RoboSharp.CopyOptions.Source" path="*"/></param>
            <param name="destination"><inheritdoc cref="P:RoboSharp.CopyOptions.Destination" path="*"/></param>
            <inheritdoc cref="M:RoboSharp.RoboCommand.#ctor(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommandFactory.GetRoboCommand(System.String,System.String,RoboSharp.CopyActionFlags)">
            <inheritdoc cref="M:RoboSharp.RoboCommandFactory.GetRoboCommand(System.String,System.String,RoboSharp.CopyActionFlags,RoboSharp.SelectionFlags)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommandFactory.GetRoboCommand(System.String,System.String,RoboSharp.CopyActionFlags,RoboSharp.SelectionFlags)">
            <inheritdoc cref="M:RoboSharp.RoboCommandFactory.GetRoboCommand(System.String,System.String,RoboSharp.CopyActionFlags,RoboSharp.SelectionFlags)"/>
        </member>
        <member name="T:RoboSharp.Interfaces.IRoboCommandSerializer">
            <summary>
            Interface for objects to serialize / deserialize a collection of <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> objects
            </summary>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommandSerializer.Serialize(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.String)">
            <summary>
            Serialize the IRoboCommands to a specified <paramref name="path"/>
            </summary>
            <param name="commands">The commands to serialize</param>
            <param name="path">The path to save the serialized commands into</param>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCommandSerializer.Deserialize(System.String)">
            <summary>
            Deserialize the specified path into a collection of <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> objects
            </summary>
            <param name="path">The file/folder path to read</param>
            <returns>a new collection of <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> objects</returns>
        </member>
        <member name="T:RoboSharp.Interfaces.IRoboCopyCombinedExitStatus">
            <summary>
            Read-Only interface for <see cref="T:RoboSharp.Results.RoboCopyCombinedExitStatus"/>
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/IRoboCopyCombinedExitStatus"/>
            </remarks>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyCombinedExitStatus.WasCancelled">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyCombinedExitStatus.WasCancelled"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyCombinedExitStatus.AnyNoCopyNoError">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyCombinedExitStatus.AnyNoCopyNoError"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyCombinedExitStatus.AnyWasCancelled">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyCombinedExitStatus.AnyWasCancelled"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyCombinedExitStatus.AllSuccessful">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyCombinedExitStatus.AllSuccessful"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyCombinedExitStatus.AllSuccessful_WithWarnings">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyCombinedExitStatus.AllSuccessful_WithWarnings"/>
        </member>
        <member name="T:RoboSharp.Interfaces.IRoboCopyResultsList">
            <summary>
            Interface to provide Read-Only access to a <see cref="T:RoboSharp.Results.RoboCopyResultsList"/>
            <para/>Implements: <br/>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T = <see cref="T:RoboSharp.Results.RoboCopyResults"/> <br/>
            <see cref="T:System.ICloneable"/>
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/IRoboCopyResultsList"/>
            </remarks>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyResultsList.Item(System.Int32)">
            <summary>
            Get the <see cref="T:RoboSharp.Results.RoboCopyResults"/> objects at the specified index.
            </summary>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyResultsList.DirectoriesStatistic">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResultsList.DirectoriesStatistic"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyResultsList.BytesStatistic">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResultsList.BytesStatistic"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyResultsList.FilesStatistic">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResultsList.FilesStatistic"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyResultsList.SpeedStatistic">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResultsList.SpeedStatistic"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyResultsList.Status">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResultsList.Status"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyResultsList.Collection">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResultsList.Collection"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboCopyResultsList.Count">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResultsList.Count"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetByteStatistics">
            <summary>
            Get a snapshot of the ByteStatistics objects from this list.
            </summary>
            <returns>New array of the ByteStatistic objects</returns>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetDirectoriesStatistics">
            <summary>
            Get a snapshot of the DirectoriesStatistic objects from this list.
            </summary>
            <returns>New array of the DirectoriesStatistic objects</returns>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetFilesStatistics">
            <summary>
            Get a snapshot of the FilesStatistic objects from this list.
            </summary>
            <returns>New array of the FilesStatistic objects</returns>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetStatuses">
            <summary>
            Get a snapshot of the FilesStatistic objects from this list.
            </summary>
            <returns>New array of the FilesStatistic objects</returns>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetSpeedStatistics">
            <summary>
            Get a snapshot of the FilesStatistic objects from this list.
            </summary>
            <returns>New array of the FilesStatistic objects</returns>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetErrors">
            <summary>
            Combine the <see cref="P:RoboSharp.Results.RoboCopyResults.RoboCopyErrors"/> into a single array of errors
            </summary>
            <returns>New array of the ErrorEventArgs objects</returns>
        </member>
        <member name="T:RoboSharp.Interfaces.IRoboQueue">
            <summary>
            Interface for RoboQueue
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.AnyCancelled">
            <inheritdoc cref="P:RoboSharp.RoboQueue.AnyCancelled"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.AnyPaused">
            <inheritdoc cref="P:RoboSharp.RoboQueue.AnyPaused"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.AnyRunning">
            <inheritdoc cref="P:RoboSharp.RoboQueue.AnyRunning"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.Commands">
            <inheritdoc cref="P:RoboSharp.RoboQueue.Commands"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.CopyOperationCompleted">
            <inheritdoc cref="P:RoboSharp.RoboQueue.CopyOperationCompleted"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.IsCopyOperationRunning">
            <inheritdoc cref="P:RoboSharp.RoboQueue.IsCopyOperationRunning"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.IsListOnlyRunning">
            <inheritdoc cref="P:RoboSharp.RoboQueue.IsListOnlyRunning"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.IsPaused">
            <inheritdoc cref="P:RoboSharp.RoboQueue.IsPaused"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.IsRunning">
            <inheritdoc cref="P:RoboSharp.RoboQueue.IsRunning"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.JobsComplete">
            <inheritdoc cref="P:RoboSharp.RoboQueue.JobsComplete"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.JobsCompletedSuccessfully">
            <inheritdoc cref="P:RoboSharp.RoboQueue.JobsCompletedSuccessfully"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.JobsCurrentlyRunning">
            <inheritdoc cref="P:RoboSharp.RoboQueue.JobsCurrentlyRunning"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.JobsStarted">
            <inheritdoc cref="P:RoboSharp.RoboQueue.JobsStarted"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.ListCount">
            <inheritdoc cref="P:RoboSharp.RoboQueue.ListCount"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.ListOnlyCompleted">
            <inheritdoc cref="P:RoboSharp.RoboQueue.ListOnlyCompleted"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.ListResults">
            <inheritdoc cref="P:RoboSharp.RoboQueue.ListResults"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.MaxConcurrentJobs">
            <inheritdoc cref="P:RoboSharp.RoboQueue.MaxConcurrentJobs"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.Name">
            <inheritdoc cref="P:RoboSharp.RoboQueue.Name"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.ProgressEstimator">
            <inheritdoc cref="P:RoboSharp.RoboQueue.ProgressEstimator"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.RunResults">
            <inheritdoc cref="P:RoboSharp.RoboQueue.RunResults"/>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueue.WasCancelled">
            <inheritdoc cref="P:RoboSharp.RoboQueue.WasCancelled"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboQueue.OnCommandCompleted">
            <inheritdoc cref="E:RoboSharp.RoboQueue.OnCommandCompleted"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboQueue.OnCommandError">
            <inheritdoc cref="E:RoboSharp.RoboQueue.OnCommandError"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboQueue.OnCommandStarted">
            <inheritdoc cref="E:RoboSharp.RoboQueue.OnCommandStarted"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboQueue.OnCopyProgressChanged">
            <inheritdoc cref="E:RoboSharp.RoboQueue.OnCopyProgressChanged"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboQueue.OnError">
            <inheritdoc cref="E:RoboSharp.RoboQueue.OnError"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboQueue.OnFileProcessed">
            <inheritdoc cref="E:RoboSharp.RoboQueue.OnFileProcessed"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboQueue.OnProgressEstimatorCreated">
            <inheritdoc cref="E:RoboSharp.RoboQueue.OnProgressEstimatorCreated"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboQueue.RunCompleted">
            <inheritdoc cref="E:RoboSharp.RoboQueue.RunCompleted"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboQueue.RunResultsUpdated">
            <inheritdoc cref="E:RoboSharp.RoboQueue.RunResultsUpdated"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IRoboQueue.TaskFaulted">
            <inheritdoc cref="E:RoboSharp.RoboQueue.TaskFaulted"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboQueue.PauseAll">
            <inheritdoc cref="M:RoboSharp.RoboQueue.PauseAll"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboQueue.ResumeAll">
            <inheritdoc cref="M:RoboSharp.RoboQueue.ResumeAll"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboQueue.StartAll(System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.RoboQueue.StartAll(System.String,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboQueue.StartAll_ListOnly(System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.RoboQueue.StartAll_ListOnly(System.String,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IRoboQueue.StopAll">
            <inheritdoc cref="M:RoboSharp.RoboQueue.StopAll"/>
        </member>
        <member name="T:RoboSharp.Interfaces.IRoboQueueResults">
            <summary>
            Interface for the <see cref="T:RoboSharp.Results.RoboQueueResults"/> object. <br/>
            Implements <see cref="T:RoboSharp.Interfaces.IRoboCopyResultsList"/>
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueueResults.StartTime">
            <summary>
            Local time the command started.
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueueResults.EndTime">
            <summary>
            Local time the command stopped.
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IRoboQueueResults.TimeSpan">
            <summary>
            Length of time the process took to run
            </summary>
        </member>
        <member name="T:RoboSharp.Interfaces.ISpeedStatistic">
            <summary>
            Provide Read-Only access to a SpeedStatistic
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/ISpeedStatistic"/>
            </remarks>
        </member>
        <member name="P:RoboSharp.Interfaces.ISpeedStatistic.BytesPerSec">
            <summary> Average Transfer Rate in Bytes/Second </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.ISpeedStatistic.MegaBytesPerMin">
            <summary> Average Transfer Rate in MB/Minute</summary>
        </member>
        <member name="M:RoboSharp.Interfaces.ISpeedStatistic.ToString">
            <inheritdoc cref="M:RoboSharp.Results.SpeedStatistic.ToString"/>
        </member>
        <member name="M:RoboSharp.Interfaces.ISpeedStatistic.Clone">
            <returns>new <see cref="T:RoboSharp.Results.SpeedStatistic"/> object </returns>
            <inheritdoc cref="M:RoboSharp.Results.SpeedStatistic.#ctor(RoboSharp.Interfaces.ISpeedStatistic)"/>
        </member>
        <member name="T:RoboSharp.Interfaces.IStatistic">
            <summary>
            Provide Read-Only access to a <see cref="T:RoboSharp.Results.Statistic"/> object
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/IStatistic"/>
            </remarks>
        </member>
        <member name="P:RoboSharp.Interfaces.IStatistic.Name">
            <summary>
            Name of the Statistics Object
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IStatistic.Type">
            <summary>
            <inheritdoc cref="T:RoboSharp.Results.Statistic.StatType"/>
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IStatistic.Total">
            <summary> Total Scanned during the run</summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IStatistic.Copied">
            <summary> Total Copied </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IStatistic.Skipped">
            <summary> Total Skipped </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IStatistic.Mismatch">
            <summary>  </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IStatistic.Failed">
            <summary> Total that failed to copy or move </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IStatistic.Extras">
            <summary> Total Extra that exist in the Destination (but are missing from the Source)</summary>
        </member>
        <member name="P:RoboSharp.Interfaces.IStatistic.NonZeroValue">
            <inheritdoc cref="P:RoboSharp.Results.Statistic.NonZeroValue"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IStatistic.PropertyChanged">
            <inheritdoc cref="E:RoboSharp.Results.Statistic.PropertyChanged"/>
        </member>
        <member name="E:RoboSharp.Interfaces.IStatistic.OnTotalChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Interfaces.IStatistic.Total"/> Property is updated. </summary>
        </member>
        <member name="E:RoboSharp.Interfaces.IStatistic.OnCopiedChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Interfaces.IStatistic.Copied"/> Property is updated. </summary>
        </member>
        <member name="E:RoboSharp.Interfaces.IStatistic.OnSkippedChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Interfaces.IStatistic.Skipped"/> Property is updated. </summary>
        </member>
        <member name="E:RoboSharp.Interfaces.IStatistic.OnMisMatchChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Interfaces.IStatistic.Mismatch"/> Property is updated. </summary>
        </member>
        <member name="E:RoboSharp.Interfaces.IStatistic.OnFailedChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Interfaces.IStatistic.Failed"/> Property is updated. </summary>
        </member>
        <member name="E:RoboSharp.Interfaces.IStatistic.OnExtrasChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Interfaces.IStatistic.Extras"/> Property is updated. </summary>
        </member>
        <member name="M:RoboSharp.Interfaces.IStatistic.ToString">
            <inheritdoc cref="M:RoboSharp.Results.SpeedStatistic.ToString"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IStatistic.ToString(System.Boolean,System.Boolean,System.String,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString(System.Boolean,System.Boolean,System.String,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IStatistic.ToString_Type">
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Type"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IStatistic.ToString_Total(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Total(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IStatistic.ToString_Copied(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Copied(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IStatistic.ToString_Extras(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Extras(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IStatistic.ToString_Failed(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Failed(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IStatistic.ToString_Mismatch(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Mismatch(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IStatistic.ToString_Skipped(System.Boolean,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Skipped(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Interfaces.IStatistic.Clone">
            <returns>new <see cref="T:RoboSharp.Results.Statistic"/> object </returns>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.#ctor(RoboSharp.Interfaces.IStatistic)"/>
        </member>
        <member name="T:RoboSharp.Interfaces.ITimeSpan">
            <summary>
            Interface to normalize all the Start/End/TimeSpan properties of various objects
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.ITimeSpan.StartTime">
            <summary>
            Local time the command started.
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.ITimeSpan.EndTime">
            <summary>
            Local time the command stopped.
            </summary>
        </member>
        <member name="P:RoboSharp.Interfaces.ITimeSpan.TimeSpan">
            <summary>
            Length of time the process took to run
            </summary>
        </member>
        <member name="T:RoboSharp.JobFile">
            <summary>
            Represents a single RoboCopy Job File
            <para/>Implements: <br/>
            <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> <br/>
            <see cref="T:System.ICloneable"/> <br/>
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/JobFile"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.JobFile.#ctor">
            <summary>
            Create a JobFile with Default Options
            </summary>
        </member>
        <member name="M:RoboSharp.JobFile.#ctor(RoboSharp.JobFile)">
            <summary>
            Constructor for ICloneable Interface
            </summary>
            <param name="jobFile"></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:RoboSharp.JobFile.#ctor(RoboSharp.Interfaces.IRoboCommand,System.String)">
            <summary>
            Create a JobFile object that shares its options objects with the specified <paramref name="cmd"/>
            </summary>
            <param name="cmd">IRoboCommand whose options shall be saved.</param>
            <param name="filePath">Optional FilePath to specify for future call to <see cref="M:RoboSharp.JobFile.Save"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:RoboSharp.JobFile.#ctor(System.String,RoboSharp.RoboCommand)">
            <summary>
            Constructor for Factory Methods
            </summary>
            <param name="filePath">the filepath to save the job file into</param>
            <param name="commandToUseWhenSaving">the RoboCommand to use when saving</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:RoboSharp.JobFile.ParseJobFile(System.String)">
            <inheritdoc cref="M:RoboSharp.JobFileBuilder.Parse(System.String)"/>
        </member>
        <member name="M:RoboSharp.JobFile.ParseJobFile(System.IO.StreamReader)">
            <inheritdoc cref="M:RoboSharp.JobFileBuilder.Parse(System.IO.StreamReader)"/>
        </member>
        <member name="M:RoboSharp.JobFile.ParseJobFile(System.IO.FileInfo)">
            <inheritdoc cref="M:RoboSharp.JobFileBuilder.Parse(System.IO.FileInfo)"/>
        </member>
        <member name="M:RoboSharp.JobFile.ParseJobFile(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:RoboSharp.JobFileBuilder.Parse(System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:RoboSharp.JobFile.TryParseJobFile(System.String,RoboSharp.JobFile@)">
            <summary>Try to parse a file at the specified path.</summary>
            <returns>True if the the <paramref name="jobFile"/> was created successfully, otherwise false.</returns>
            <inheritdoc cref="M:RoboSharp.JobFile.ParseJobFile(System.String)"/>
        </member>
        <member name="M:RoboSharp.JobFile.TryParseJobFile(System.IO.FileInfo,RoboSharp.JobFile@)">
            <summary>Try to parse a file at the specified path.</summary>
            <returns>True if the the <paramref name="jobFile"/> was created successfully, otherwise false.</returns>
            <inheritdoc cref="M:RoboSharp.JobFile.ParseJobFile(System.IO.FileInfo)"/>
        </member>
        <member name="M:RoboSharp.JobFile.TryParseJobFile(System.IO.StreamReader,RoboSharp.JobFile@)">
            <summary>Try to parse a file at the specified path.</summary>
            <returns>True if the the <paramref name="jobFile"/> was created successfully, otherwise false.</returns>
            <inheritdoc cref="M:RoboSharp.JobFile.ParseJobFile(System.IO.StreamReader)"/>
        </member>
        <member name="M:RoboSharp.JobFile.Clone">
            <summary>
            Create a clone of this JobFile
            </summary>
        </member>
        <member name="F:RoboSharp.JobFile.JOBFILE_Extension">
            <summary>
            Expected File Extension for Job Files exported from RoboCopy.
            </summary>
        </member>
        <member name="F:RoboSharp.JobFile.JOBFILE_SearchPattern">
            <summary>
            FileFilter to use in an to search for this extension, such as with <see cref="M:System.IO.DirectoryInfo.GetFiles(System.String)"/>
            </summary>
        </member>
        <member name="F:RoboSharp.JobFile.JOBFILE_DialogFilter">
            <summary>
            FileFilter to use in a dialog window, such as the OpenFileDialog window.
            </summary>
        </member>
        <member name="F:RoboSharp.JobFile.roboCommand">
            <summary>
            The underlying RoboCommand object
            </summary>
        </member>
        <member name="P:RoboSharp.JobFile.FilePath">
            <summary>FilePath of the Job File </summary>
        </member>
        <member name="P:RoboSharp.JobFile.Name">
            <inheritdoc cref="P:RoboSharp.RoboCommand.Name"/>
        </member>
        <member name="P:RoboSharp.JobFile.CopyOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.LoggingOptions"/>
        </member>
        <member name="P:RoboSharp.JobFile.LoggingOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.LoggingOptions"/>
        </member>
        <member name="P:RoboSharp.JobFile.RetryOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.LoggingOptions"/>
        </member>
        <member name="P:RoboSharp.JobFile.SelectionOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.LoggingOptions"/>
        </member>
        <member name="P:RoboSharp.JobFile.NoSourceDirectory">
            <summary>
            Check if the <see cref="P:RoboSharp.CopyOptions.Source"/> is empty
            </summary>
        </member>
        <member name="P:RoboSharp.JobFile.NoDestinationDirectory">
            <summary>
            Check if the <see cref="P:RoboSharp.CopyOptions.Destination"/> is empty
            </summary>
        </member>
        <member name="M:RoboSharp.JobFile.Save(System.String,System.Boolean,System.Boolean)">
            <summary>
            Update the <see cref="P:RoboSharp.JobFile.FilePath"/> property and save the JobFile to the <paramref name="path"/>
            </summary>
            <param name="path">Update the <see cref="P:RoboSharp.JobFile.FilePath"/> property, then save the JobFile to this path.</param>
            <inheritdoc cref="M:RoboSharp.JobFile.Save"/>
            <inheritdoc cref="M:RoboSharp.RoboCommand.SaveAsJobFile(System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.JobFile.Save">
            <summary>
            Save the JobFile to <see cref="P:RoboSharp.JobFile.FilePath"/>. <br/>
            Source and Destination will be included by default.
            </summary>
            <remarks>If path is null/empty, will throw <see cref="T:System.ArgumentException"/></remarks>
            <returns>Task that completes when the JobFile has been saved.</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.JOBFILE_CommentPrefix">
            <summary>
            Any comments within the job file lines will start with this string
            </summary>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.JOBFILE_JobName">
            <inheritdoc cref="F:RoboSharp.JobFile.JOBFILE_Extension"/>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.RegString_SWITCH">
            <summary>Pattern to Identify the SWITCH, DELIMITER and VALUE section</summary>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.RegString_SWITCH_NumericValue">
            <summary>Pattern to Identify the SWITCH, DELIMIETER and VALUE section</summary>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.RegString_COMMENT">
            <summary>Pattern to Identify COMMENT sections - Throws out white space and comment delimiter '::' </summary>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.LINE_IsComment">
            <summary>
            Regex to check if an entire line is a comment
            </summary>
            <remarks>
            Captured Group Names: <br/>
            COMMENT
            </remarks>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.LINE_IsSwitch">
            <summary>
            Regex to check if the string is a flag for RoboCopy - These typically will have comments
            </summary>
            <remarks>
            Captured Group Names: <br/>
            SWITCH <br/>
            DELIMITER <br/>
            VALUE <br/>
            COMMENT
            </remarks>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.JobNameRegex">
            <summary>
            JobName for ROboCommand is not valid parameter for RoboCopy, so we save it into a comment within the file
            </summary>
            <remarks>
            Captured Group Names: <br/>
            FLAG <br/>
            NAME <br/>
            COMMENT
            </remarks>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.DirFileFilterRegex">
            <summary>
            Regex used for parsing File and Directory filters for /IF /XD and /XF flags
            </summary>
            <remarks>
            Captured Group Names: <br/>
            PATH <br/>
            COMMENT
            </remarks>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.CopyOptionsRegex_SourceDir">
            <summary>
            Regex to find the SourceDirectory within the JobFile
            </summary>
            <remarks>
            Captured Group Names: <br/>
            SWITCH <br/>
            PATH <br/>
            COMMENT
            </remarks>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.CopyOptionsRegex_DestinationDir">
            <summary>
            Regex to find the DestinationDirectory within the JobFile
            </summary>
            <remarks>
            Captured Group Names: <br/>
            SWITCH <br/>
            PATH <br/>
            COMMENT
            </remarks>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.CopyOptionsRegex_IncludeFiles">
            <summary>
            Regex to determine if on the INCLUDE FILES section of the JobFile
            </summary>
            <remarks>
            Each new path / filename should be on its own line
            </remarks>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.SelectionRegex_ExcludeFiles">
            <summary>
            Regex to determine if on the EXCLUDE FILES section of the JobFile
            </summary>
            <remarks>
            Each new path / filename should be on its own line
            </remarks>
        </member>
        <member name="F:RoboSharp.JobFileBuilder.SelectionRegex_ExcludeDirs">
            <summary>
            Regex to determine if on the EXCLUDE DIRECTORIES section of the JobFile
            </summary>
            <remarks>
            Each new path / filename should be on its own line
            </remarks>
        </member>
        <member name="M:RoboSharp.JobFileBuilder.IsCorrectFileExtension(System.String)">
            <summary>
            Check if the supplied filepath is valid for a RoboCopyJob file (.rcj)
            </summary>
            <param name="filePath">The file path to evaluate</param>
            <returns>TRUE if the path has the correct extension, otherwise false.</returns>
        </member>
        <member name="M:RoboSharp.JobFileBuilder.Parse(System.IO.FileInfo)">
            <summary>
            Read each line using <see cref="M:System.IO.FileInfo.OpenText"/> and attempt to produce a Job File. <para/>
            </summary>
            <param name="file">FileInfo object for some Job File. File Path should end in .RCJ</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <inheritdoc cref="M:RoboSharp.JobFileBuilder.Parse(System.IO.StreamReader)"/>
            <inheritdoc cref="M:System.IO.File.OpenText(System.String)"/>
        </member>
        <member name="M:RoboSharp.JobFileBuilder.Parse(System.String)">
            <summary>
            Read each line using <see cref="M:System.IO.File.OpenText(System.String)"/> and attempt to produce a Job File. <para/>
            </summary>
            <param name="path">File Path to some Job File. File Path should end in .RCJ</param>
            <exception cref="T:System.ArgumentException"/>
            <inheritdoc cref="M:RoboSharp.JobFileBuilder.Parse(System.IO.StreamReader)"/>
            <inheritdoc cref="M:System.IO.File.OpenText(System.String)"/>
        </member>
        <member name="M:RoboSharp.JobFileBuilder.Parse(System.IO.StreamReader)">
            <summary>
            Read each line from a StreamReader and attempt to produce a Job File.
            </summary>
            <param name="streamReader">StreamReader for a file stream that represents a Job File.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <inheritdoc cref="M:RoboSharp.JobFileBuilder.Parse(System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:RoboSharp.JobFileBuilder.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parse each line in <paramref name="Lines"/>, and attempt to create a new JobFile object.
            </summary>
            <param name="Lines">String[] read from a JobFile</param>
            <returns>A new robocommand</returns>
        </member>
        <member name="M:RoboSharp.JobFileBuilder.Build_CopyOptions(System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Group},System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.GroupCollection},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parser to create CopyOptions object for JobFiles
            </summary>
        </member>
        <member name="M:RoboSharp.JobFileBuilder.Build_SelectionOptions(System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Group},System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.GroupCollection},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parser to create SelectionOptions object for JobFiles
            </summary>
        </member>
        <member name="M:RoboSharp.JobFileBuilder.Build_LoggingOptions(System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Group},System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.GroupCollection},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parser to create LoggingOptions object for JobFiles
            </summary>
        </member>
        <member name="M:RoboSharp.JobFileBuilder.Build_JobOptions(System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Group},System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.GroupCollection},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parser to create JobOptions object for JobFiles
            </summary>
        </member>
        <member name="T:RoboSharp.JobFileSerializer">
            <summary>
            Serialize IRoboCommands to RCJ files within a directory
            </summary>
        </member>
        <member name="M:RoboSharp.JobFileSerializer.Deserialize(System.String)">
            <inheritdoc cref="M:RoboSharp.JobFileSerializer.Deserialize(System.String)"/>
            <inheritdoc cref="M:System.IO.DirectoryInfo.#ctor(System.String)"/>
        </member>
        <member name="M:RoboSharp.JobFileSerializer.Deserialize(System.IO.DirectoryInfo)">
            <summary>
            Enumerate all .RCJ files within the specified directory, and return a collection of <see cref="T:RoboSharp.JobFile"/> objects.
            </summary>
            <param name="path">The directory to read .RCJ files from</param>
            <returns>A new IEnumerable&lt;<see cref="T:RoboSharp.JobFile"/>&gt; object</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFiles(System.String)"/>
        </member>
        <member name="M:RoboSharp.JobFileSerializer.Serialize(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.String)">
            <inheritdoc cref="M:RoboSharp.JobFileSerializer.Serialize(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.IO.DirectoryInfo)"/>
            <inheritdoc cref="M:System.IO.DirectoryInfo.#ctor(System.String)"/>
        </member>
        <member name="M:RoboSharp.JobFileSerializer.Serialize(System.String,RoboSharp.Interfaces.IRoboCommand[])">
            <inheritdoc cref="M:RoboSharp.JobFileSerializer.Serialize(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.String)"/>
        </member>
        <member name="M:RoboSharp.JobFileSerializer.Serialize(System.IO.DirectoryInfo,RoboSharp.Interfaces.IRoboCommand[])">
            <inheritdoc cref="M:RoboSharp.JobFileSerializer.Serialize(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.IO.DirectoryInfo)"/>
        </member>
        <member name="M:RoboSharp.JobFileSerializer.Serialize(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.IO.DirectoryInfo)">
            <summary>
            Process each command and save it as a JobFile
            </summary>
            <param name="commands">The commands to save as .RCJ files</param>
            <param name="path">A path to a Directory to save the RCJ files into</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:RoboSharp.JobOptions">
            <summary>
            
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/JobOptions"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.JobOptions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:RoboSharp.JobOptions.#ctor(RoboSharp.JobOptions)">
            <summary>
            Constructor for ICloneable Interface
            </summary>
            <param name="options">JobOptions object to clone</param>
        </member>
        <member name="M:RoboSharp.JobOptions.Clone">
            <summary>
            Clone this JobOptions object
            </summary>
            <returns>New JobOptions object</returns>
        </member>
        <member name="F:RoboSharp.JobOptions.JOB_LOADNAME">
            <summary>
            Take parameters from the named job file
            </summary>
            <remarks>
            Usage: /JOB:"Path\To\File.RCJ"
            </remarks>
        </member>
        <member name="F:RoboSharp.JobOptions.JOB_SAVE">
            <summary>
            Save parameters to the named job file
            </summary>
            <remarks>
            Usage: <br/>
            /SAVE:"Path\To\File" -> Creates Path\To\File.RCJ <br/>
            /SAVE:"Path\To\File.txt" -> Creates Path\To\File.txt.RCJ <br/>
            </remarks>
        </member>
        <member name="F:RoboSharp.JobOptions.JOB_QUIT">
            <summary>
            Quit after processing command line
            </summary>
            <remarks>
            Used when writing JobFile
            </remarks>
        </member>
        <member name="P:RoboSharp.JobOptions.FilePath">
            <summary>
            FilePath to save the Job Options (.RCJ) file to. <br/>
            /SAVE:{FilePath}
            </summary>
            <remarks>
            This causes RoboCopy to generate an RCJ file where the command options are stored to so it can be used later.
            </remarks>
        </member>
        <member name="P:RoboSharp.JobOptions.LoadJobFilePath">
            <summary>
            When set, RoboCopy will load the job options from the specified <see cref="P:RoboSharp.JobOptions.FilePath"/>. <br/>
             /JOB:{FilePath}
            <br/> Note that any options read using this method will not be see by the other Options objects, unless loaded in via <see cref="M:RoboSharp.JobFile.ParseJobFile(System.String)"/>
            </summary>
        </member>
        <member name="P:RoboSharp.JobOptions.PreventCopyOperation">
            <summary>
            RoboCopy will validate the command, then exit before performing any Move/Copy/List operations. <br/>
            /QUIT
            </summary>
            <remarks>
            This option is typically used when generating JobFiles. RoboCopy will exit after saving the Job FIle to the specified <see cref="P:RoboSharp.JobOptions.FilePath"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.JobOptions.Parse">
            <summary>
            Parse the properties and return the string
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.JobOptions.ToString">
            <summary>
            Returns the Parsed Options as it would be applied to RoboCopy
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.JobOptions.RunPostProcessing(RoboSharp.RoboCommand)">
            <summary>
            Adds the 'NAME' and other properties into the JobFile
            </summary>
        </member>
        <member name="M:RoboSharp.JobOptions.Merge(RoboSharp.JobOptions)">
            <summary>
            Combine this object with another RetryOptions object. <br/>
            <see cref="P:RoboSharp.JobOptions.FilePath"/> not not be modified.
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:RoboSharp.LoggingFlags">
            <summary>
            Enum to define the logging actions to be taken by RoboCopy process.
            </summary>
        </member>
        <member name="F:RoboSharp.LoggingFlags.None">
            <summary>
            All Logging Options are set to <see langword="false"/>
            </summary>
        </member>
        <member name="F:RoboSharp.LoggingFlags.IncludeFullPathNames">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.IncludeFullPathNames"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.IncludeSourceTimeStamps">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.IncludeSourceTimeStamps"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.ListOnly">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.ListOnly"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.NoDirectoryList">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.NoDirectoryList"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.NoFileClasses">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.NoFileClasses"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.NoFileList">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.NoFileList"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.NoFileSizes">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.NoFileSizes"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.NoJobHeader">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.NoJobHeader"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.NoJobSummary">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.NoJobSummary"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.NoProgress">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.NoProgress"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.OutputAsUnicode">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.OutputAsUnicode"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.OutputToRoboSharpAndLog">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.OutputToRoboSharpAndLog"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.PrintSizesAsBytes">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.PrintSizesAsBytes"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.ReportExtraFiles">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.ReportExtraFiles"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.ShowEstimatedTimeOfArrival">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.ShowEstimatedTimeOfArrival"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.VerboseOutput">
            <inheritdoc cref="P:RoboSharp.LoggingOptions.VerboseOutput"/>
        </member>
        <member name="F:RoboSharp.LoggingFlags.RoboSharpDefault">
            <summary>
            The flags that are automatically applied by RoboSharp to allow it to function properly. <br/>
            The ApplyLoggingFlags method will not remove these flags, only apply them.
            </summary>
        </member>
        <member name="T:RoboSharp.LoggingOptions">
            <summary>
            Options related to the output logs generated by RoboCopy
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/LoggingOptions"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.LoggingOptions.#ctor">
            <summary>
            Create new LoggingOptions with Default Settings
            </summary>
        </member>
        <member name="M:RoboSharp.LoggingOptions.#ctor(RoboSharp.LoggingFlags)">
            <summary>
            Create new LoggingOptions with Default Settings
            </summary>
        </member>
        <member name="M:RoboSharp.LoggingOptions.#ctor(RoboSharp.LoggingOptions)">
            <summary>
            Clone a LoggingOptions Object
            </summary>
            <param name="options">LoggingOptions object to clone</param>
        </member>
        <member name="M:RoboSharp.LoggingOptions.Clone">
            <inheritdoc cref="M:RoboSharp.LoggingOptions.#ctor(RoboSharp.LoggingOptions)"/>
        </member>
        <member name="P:RoboSharp.LoggingOptions.ListOnly">
            <summary>
            Do not copy, timestamp or delete any files.
            [/L]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.ReportExtraFiles">
            <summary>
            Report all extra files, not just those selected.
            [X]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.VerboseOutput">
            <summary>
            Produce verbose output, showing skipped files.
            [V]
            </summary>
            <remarks>
            If set false, RoboCommand ProgressEstimator will not be accurate due files not showing in the logs.
            </remarks>
        </member>
        <member name="P:RoboSharp.LoggingOptions.IncludeSourceTimeStamps">
            <summary>
            Include source file time stamps in the output.
            [/TS]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.IncludeFullPathNames">
            <summary>
            Include full path names of files in the output.
            [/FP]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.PrintSizesAsBytes">
            <summary>
            Print sizes as bytes in the output.
            [/BYTES]
            </summary>
            <remarks>
            Automatically appended by the base RoboCommand object to allow results to work properly
            </remarks>
        </member>
        <member name="P:RoboSharp.LoggingOptions.NoFileSizes">
            <summary>
            Do not log file sizes.
            [/NS]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.NoFileClasses">
            <summary>
            Do not log file classes.
            [/NC]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.NoFileList">
            <summary>
            Do not log file names.
            [/NFL]
            WARNING: If this is set to TRUE then GUI cannot handle showing progress correctly as it can't get information it requires from the log
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.NoDirectoryList">
            <summary>
            Do not log directory names.
            [/NDL]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.NoProgress">
            <summary>
            Do not log percentage copied.
            [/NP]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.ShowEstimatedTimeOfArrival">
            <summary>
            Show estimated time of arrival of copied files.
            [/ETA]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.LogPath">
            <summary>
            Output status to LOG file (overwrite existing log).
            [/LOG:file]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.AppendLogPath">
            <summary>
            Output status to LOG file (append to existing log).
            [/LOG+:file]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.UnicodeLogPath">
            <summary>
            Output status to LOG file as UNICODE (overwrite existing log).
            [/UNILOG:file]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.AppendUnicodeLogPath">
            <summary>
            Output status to LOG file as UNICODE (append to existing log).
            [/UNILOG+:file]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.OutputToRoboSharpAndLog">
            <summary>
            Output to RoboSharp and Log.
            [/TEE]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.NoJobHeader">
            <summary>
            Do not output a Job Header.
            [/NJH]
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.NoJobSummary">
            <summary>
            Do not output a Job Summary.
            [/NJS]
            WARNING: If this is set to TRUE then statistics will not work correctly as this information is gathered from the job summary part of the log 
            </summary>
        </member>
        <member name="P:RoboSharp.LoggingOptions.OutputAsUnicode">
            <summary>
            Output as UNICODE.
            [/UNICODE]
            </summary>
        </member>
        <member name="M:RoboSharp.LoggingOptions.ApplyLoggingFlags(RoboSharp.LoggingFlags)">
            <summary>
            Set the Logging Options using the <paramref name="flags"/> <br/>
            </summary>
            <remarks>
            The <see cref="F:RoboSharp.LoggingFlags.RoboSharpDefault"/> is able to be applied, but will not be removed here to retain functionality with the library. <br/>
            Removal of those options must be done explicitly vai the property
            </remarks>
            <param name="flags"></param>
        </member>
        <member name="M:RoboSharp.LoggingOptions.GetLoggingActionFlags">
            <summary>
            Converts the boolean values back into the <see cref="T:RoboSharp.LoggingFlags"/> enum that represents the currently selected options
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.LoggingOptions.WrapPath(System.String)">
            <summary> Encase the LogPath in quotes if needed </summary>
        </member>
        <member name="M:RoboSharp.LoggingOptions.ToString">
            <summary>
            Returns the Parsed Options as it would be applied to RoboCopy
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.LoggingOptions.IsLogFileSpecified">
            <summary>
            Evaluate the Log File paths and determine if any are specified.
            </summary>
            <returns>TRUE if atleast one log file is specified, otherwise false.</returns>
        </member>
        <member name="M:RoboSharp.LoggingOptions.Merge(RoboSharp.LoggingOptions)">
            <summary>
            Combine this object with another LoggingOptions object. <br/>
            Any properties marked as true take priority. IEnumerable items are combined. <br/>
            String Values will only be replaced if the primary object has a null/empty value for that property.
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:RoboSharp.NativeMethods">
            <summary>
            Native Methods for Pause/Suspend/Resume processes
            </summary>
        </member>
        <member name="T:RoboSharp.ObservableList`1">
            <summary>
            This is a thread-safe list whose underlying collection is immutable.
            <br/> - When enumerating against the list, you will receive an immutable collection that will not reflect changes if this list is modified by another thread during that iteration.
            <br/> - The <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> event can be used to listen for when the collection changes.
            <br/> - <see cref="E:RoboSharp.ObservableList`1.PropertyChanged"/> is only implemented for the <see cref="P:RoboSharp.ObservableList`1.ReadOnlyList"/> property of this class, in order to allow safe data-binding for WPF applications.
            </summary>
            <typeparam name="T">Type of object the list will contain</typeparam>
        </member>
        <member name="M:RoboSharp.ObservableList`1.#ctor">
            <inheritdoc cref="M:System.Collections.Generic.List`1.#ctor"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.#ctor(`0[])">
            <inheritdoc cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Convert a List into an ObservableList
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:RoboSharp.ObservableList`1.LockObject">
            <summary>
            The lock this object uses to ensure thread-safety
            </summary>
        </member>
        <member name="P:RoboSharp.ObservableList`1.InternalList">
            <summary>
            The internal list this object uses to provide the collection functionality
            </summary>
        </member>
        <member name="P:RoboSharp.ObservableList`1.ReadOnlyList">
            <summary>
            Provides a ReadOnly list that can be safely bound to to provide UI updates. 
            </summary>
            <remarks>
            <br/> - This points directly at the underlying ImmutableList{<typeparamref name="T"/>}, object, so this represents the list value as soon as the its updated. 
            <br/> - Updating the list will start an async task that raises INotifyPropertyChanged to update the UI 100ms after the first change, 
            so any changes within that time-frame will all be pushed at once, instead of multiple notifications hitting the dispatcher.
            </remarks>
        </member>
        <member name="P:RoboSharp.ObservableList`1.ResetNotificationsOnly">
            <summary>
            set TRUE to only enable <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> notifications, as opposed to full notifications. (WPF Compatibility)
            </summary>
        </member>
        <member name="P:RoboSharp.ObservableList`1.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:RoboSharp.ObservableList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:RoboSharp.ObservableList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:RoboSharp.ObservableList`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:RoboSharp.ObservableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:RoboSharp.ObservableList`1.System#Collections#IList#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="E:RoboSharp.ObservableList`1.PropertyChanged">
            <summary> Notifies when the <see cref="P:RoboSharp.ObservableList`1.ReadOnlyList"/> property is updated. </summary>
        </member>
        <member name="E:RoboSharp.ObservableList`1.CollectionChanged">
            <summary> This event fires whenever the List's array is updated. </summary>
        </member>
        <member name="M:RoboSharp.ObservableList`1.NotifyCollectionChanged">
            <summary>
            Raise the <see cref="E:RoboSharp.ObservableList`1.CollectionChanged"/> event with a status of <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/>
            </summary>
        </member>
        <member name="M:RoboSharp.ObservableList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise the <see cref="E:RoboSharp.ObservableList`1.CollectionChanged"/> event. <br/>
            <para/>
            Override this method to provide post-processing of Added/Removed items within derived classes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RoboSharp.ObservableList`1.op_Explicit(RoboSharp.ObservableList{`0})~System.Collections.Generic.List{`0}">
            <summary>
            Provide access to the underlying list using explicit casting <br/>
            NOTE: Any changes done to the list will NOT be raise observation notifications!
            </summary>
            <param name="collection">the Observable list to convert</param>
        </member>
        <member name="M:RoboSharp.ObservableList`1.op_Explicit(System.Collections.Generic.List{`0})~RoboSharp.ObservableList{`0}">
            <summary>
            Cast the list into a new <see cref="T:RoboSharp.ObservableList`1"/> by wrapping the list using <see cref="M:RoboSharp.ObservableList`1.#ctor(System.Collections.Generic.List{`0})"/>
            NOTE: Any changes done to the list after this point will not raise the notifications, but changes done using the new object will raise notifications.
            </summary>
            <param name="collection">the list to wrap</param>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Add(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Add(`0)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.AsReadOnly">
            <inheritdoc cref="M:System.Collections.Generic.List`1.AsReadOnly"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.BinarySearch(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(`0)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Clear">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Clear"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.ConvertAll``1(System.Converter{`0,``0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.CopyTo(`0[])">
            <inheritdoc cref="M:System.Collections.Generic.List`1.CopyTo(`0[])"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Exists(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Find(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.FindAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.FindIndex(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.FindLast(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.FindLastIndex(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.ForEach(System.Action{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.GetRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.IndexOf(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.IndexOf(`0,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.IndexOf(`0,System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Insert(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)"/>
            <remarks> Generates <see cref="E:RoboSharp.ObservableList`1.CollectionChanged"/> event for item that was added and item that was shifted ( Event is raised twice ) </remarks>
        </member>
        <member name="M:RoboSharp.ObservableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>
            <remarks> Generates <see cref="E:RoboSharp.ObservableList`1.CollectionChanged"/> event for items that were added and items that were shifted ( Event is raised twice )</remarks>
        </member>
        <member name="M:RoboSharp.ObservableList`1.LastIndexOf(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.LastIndexOf(`0,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Remove(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Remove(`0)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.RemoveAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Reverse">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Reverse"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Reverse(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Sort">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort"/>
            <inheritdoc cref="M:RoboSharp.ObservableList`1.PerformMove(System.Func{RoboSharp.ImmutableList{`0}})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Sort(System.Comparison{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})"/>
            <inheritdoc cref="M:RoboSharp.ObservableList`1.PerformMove(System.Func{RoboSharp.ImmutableList{`0}})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})"/>
            <inheritdoc cref="M:RoboSharp.ObservableList`1.PerformMove(System.Func{RoboSharp.ImmutableList{`0}})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})"/>
            <inheritdoc cref="M:RoboSharp.ObservableList`1.PerformMove(System.Func{RoboSharp.ImmutableList{`0}})"/>
        </member>
        <member name="P:RoboSharp.ObservableList`1.Item(System.Int32)">
            <summary>
            Get or Set the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to Get or Set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.ToArray">
            <inheritdoc cref="M:System.Collections.Generic.List`1.ToArray"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.TrueForAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.PerformMove(System.Func{RoboSharp.ImmutableList{`0}})">
            <remarks>
            Per <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> rules, generates <see cref="E:RoboSharp.ObservableList`1.CollectionChanged"/> event for every item that has moved within the list. <br/>
            </remarks>
            <param name="MoveAction">Action to perform that will rearrange items in the list - should not add, remove or replace!</param>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Replace(`0,`0)">
            <summary>
            Replace an item in the list.
            </summary>
            <param name="itemToReplace">Search for this item in the list. If found, replace it. If not found, return false. <paramref name="newItem"/> will not be added to the list. </param>
            <param name="newItem">This item will replace the <paramref name="itemToReplace"/>. If <paramref name="itemToReplace"/> was not found, this item does not get added to the list.</param>
            <returns>True if the <paramref name="itemToReplace"/> was found in the list and successfully replaced. Otherwise false.</returns>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Replace(System.Int32,`0)">
            <summary>
            Replace an item in the list
            </summary>
            <param name="index">Index of the item to replace</param>
            <param name="newItem">This item will replace the item at the specified <paramref name="index"/></param>
            <returns>True if the the item was successfully replaced. Otherwise throws. </returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.Replace(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces the items in this list with the items in supplied collection. If the collection has more items than will be removed from the list, the remaining items will be added to the list. <br/>
            EX: List has 10 items, collection has 5 items, index of 8 is specified (which is item 9 on 0-based index) -> Item 9 + 10 are replaced, and remaining 3 items from collection are added to the list.
            </summary>
            <param name="index">Index of the item to replace</param>
            <param name="collection">Collection of items to insert into the list.</param>
            <returns>True if the the collection was successfully inserted into the list. Otherwise throws.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:RoboSharp.ObservableList`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:RoboSharp.ObservableList`1.System#Collections#IList#IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.ObservableList`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:RoboSharp.PriorityScheduler">
            <summary>
            Object derived from TaskScheduler. Assisgns the task to some thread
            </summary>
        </member>
        <member name="F:RoboSharp.PriorityScheduler.AboveNormal">
            <summary> TaskScheduler for AboveNormal Priority Tasks </summary>
        </member>
        <member name="F:RoboSharp.PriorityScheduler.BelowNormal">
            <summary> TaskScheduler for BelowNormal Priority Tasks </summary>
        </member>
        <member name="F:RoboSharp.PriorityScheduler.Lowest">
            <summary> TaskScheduler for the lowest Priority Tasks </summary>
        </member>
        <member name="T:RoboSharp.ProcessedDirectoryFlag">
            <summary>
            The Directory Classes available within the configuration
            </summary>
        </member>
        <member name="F:RoboSharp.ProcessedDirectoryFlag.None">
            <summary>
            String.Empty
            </summary>
        </member>
        <member name="F:RoboSharp.ProcessedDirectoryFlag.Exclusion">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_DirectoryExclusion"/>
        </member>
        <member name="F:RoboSharp.ProcessedDirectoryFlag.ExistingDir">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_ExistingDir"/>
        </member>
        <member name="F:RoboSharp.ProcessedDirectoryFlag.ExtraDir">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_ExtraDir"/>
        </member>
        <member name="F:RoboSharp.ProcessedDirectoryFlag.NewDir">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_NewDir"/>
        </member>
        <member name="T:RoboSharp.ProcessedFileFlag">
            <summary>
            Enum for the various descriptors provided by RoboSharp that can be identified by the ProgressEstimator object, 
            and can be applied to the ProcessedFileInfo object
            </summary>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.None">
            <summary>
            String.Empty
            </summary>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.AttribExclusion">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_AttribExclusion"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.ChangedExclusion">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_ChangedExclusion"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.ExtraFile">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_ExtraFile"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.Failed">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_FailedFile"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.FileExclusion">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_FileExclusion"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.MaxAgeSizeExclusion">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_MaxAgeOrAccessExclusion"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.MaxFileSizeExclusion">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_MaxFileSizeExclusion"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.MinAgeSizeExclusion">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_MinAgeOrAccessExclusion"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.MinFileSizeExclusion">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_MinFileSizeExclusion"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.MisMatch">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_MismatchFile"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.NewerFile">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_NewerFile"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.NewFile">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_NewFile"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.OlderFile">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_OlderFile"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.SameFile">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_SameFile"/>
        </member>
        <member name="F:RoboSharp.ProcessedFileFlag.TweakedInclusion">
            <inheritdoc cref="P:RoboSharp.RoboSharpConfiguration.LogParsing_TweakedInclusion"/>
        </member>
        <member name="T:RoboSharp.FileClassType">
            <summary>
            Message Type reported by RoboCopy
            </summary>
        </member>
        <member name="F:RoboSharp.FileClassType.NewDir">
            <summary>Details about a Directory</summary>
        </member>
        <member name="F:RoboSharp.FileClassType.File">
            <summary>Details about a FILE</summary>
        </member>
        <member name="F:RoboSharp.FileClassType.SystemMessage">
            <summary>Status Message reported by RoboCopy</summary>
        </member>
        <member name="T:RoboSharp.ProcessedFileInfo">
            <summary>Contains information about the current item being processed by RoboCopy</summary>
        </member>
        <member name="F:RoboSharp.ProcessedFileInfo.SystemMessageFileClass">
            <summary>
            String used to identify the 'FileClass' property of a System Message
            </summary>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.#ctor(System.String,RoboSharp.FileClassType,System.String,System.Int64)">
            <summary>
            Generate a new object by explicitly defining the values
            </summary>
            <param name="name"><inheritdoc cref="P:RoboSharp.ProcessedFileInfo.Name" path="*" /></param>
            <param name="fileClassType"><inheritdoc cref="P:RoboSharp.ProcessedFileInfo.FileClassType" path="*" /></param>
            <param name="fileClass"><inheritdoc cref="P:RoboSharp.ProcessedFileInfo.FileClass" path="*" /></param>
            <param name="size"><inheritdoc cref="P:RoboSharp.ProcessedFileInfo.Size" path="*" /></param>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.#ctor(System.IO.FileInfo,RoboSharp.Interfaces.IRoboCommand,RoboSharp.ProcessedFileFlag)">
            <summary>
            Create a new ProcessedFileInfo object that represents some file
            <br/> The <see cref="P:RoboSharp.ProcessedFileInfo.Name"/> will depend on <see cref="P:RoboSharp.LoggingOptions.IncludeFullPathNames"/>
            </summary>
            <param name="file">the FileInfo object that was evaluated</param>
            <param name="status">The status of the file to look up from the config</param>
            <param name="command">The command that provides the <see cref="T:RoboSharp.RoboSharpConfiguration"/> and <see cref="T:RoboSharp.LoggingOptions"/> objects that will be evaluated</param>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.#ctor(System.String)">
            <summary>
            Report a message from the process
            </summary>
            <param name="systemMessage"></param>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.#ctor(System.IO.DirectoryInfo,RoboSharp.Interfaces.IRoboCommand,RoboSharp.ProcessedDirectoryFlag,System.Int64)">
            <summary>
            Create a new ProcessedFileInfo object that represents some directory.
            <br/> The <see cref="P:RoboSharp.ProcessedFileInfo.Name"/> will depend on <see cref="P:RoboSharp.LoggingOptions.IncludeFullPathNames"/>
            </summary>
            <param name="directory">the Directory</param>
            <param name="size">number of files in the directory. Use -1 if purging.</param>
            <param name="status">The status of the file to look up from the config</param>
            <param name="command">The command that provides the <see cref="T:RoboSharp.RoboSharpConfiguration"/> and <see cref="T:RoboSharp.LoggingOptions"/> objects that will be evaluated</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:RoboSharp.ProcessedFileInfo.FileClass">
            <summary>Description of the item as reported by RoboCopy</summary>
        </member>
        <member name="P:RoboSharp.ProcessedFileInfo.FileClassType">
            <inheritdoc cref="T:RoboSharp.FileClassType"/>
        </member>
        <member name="P:RoboSharp.ProcessedFileInfo.Size">
            <summary>
            File -> File Size <br/>
            Directory -> Number of selected files in folder -> Can be negative if PURGE is used <br/>
            SystemMessage -> Should be 0
            </summary>
        </member>
        <member name="P:RoboSharp.ProcessedFileInfo.Name">
            <summary>Folder or File Name / Message Text</summary>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.ToString">
            <summary>
            Translates the object back to the log line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.ToString(RoboSharp.LoggingOptions)">
            <summary>
            Evaluate <see cref="P:RoboSharp.LoggingOptions.NoFileClasses"/> and <see cref="P:RoboSharp.LoggingOptions.NoFileSizes"/> to determine if those value should be included in the output string. <br/>
            Name will always be included.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.DirInfoToString(System.Boolean)">
            <summary>
            "\t                   [FileCount]\t[DirectoryPath]"
            </summary>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.FileInfoToString(System.Boolean,System.Boolean)">
            <summary>
            "\t    [FileClass]  \t\t    [FileSize]\t[FileName]"
            </summary>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.SetDirectoryClass(RoboSharp.ProcessedDirectoryFlag,RoboSharp.RoboSharpConfiguration)">
            <summary>
            Set the <see cref="P:RoboSharp.ProcessedFileInfo.FileClass"/> property <br/>
            Only meant for consumers to use upon custom implementations of IRoboCommand
            </summary>
            <param name="status">Status to set</param>
            <param name="config">configuration provider</param>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.SetDirectoryClass(RoboSharp.ProcessedDirectoryFlag,RoboSharp.Interfaces.IRoboCommand)">
            <inheritdoc cref="M:RoboSharp.ProcessedFileInfo.SetDirectoryClass(RoboSharp.ProcessedDirectoryFlag,RoboSharp.RoboSharpConfiguration)"/>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.SetFileClass(RoboSharp.ProcessedFileFlag,RoboSharp.RoboSharpConfiguration)">
            <inheritdoc cref="M:RoboSharp.ProcessedFileInfo.SetDirectoryClass(RoboSharp.ProcessedDirectoryFlag,RoboSharp.RoboSharpConfiguration)"/>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.SetFileClass(RoboSharp.ProcessedFileFlag,RoboSharp.Interfaces.IRoboCommand)">
            <inheritdoc cref="M:RoboSharp.ProcessedFileInfo.SetDirectoryClass(RoboSharp.ProcessedDirectoryFlag,RoboSharp.RoboSharpConfiguration)"/>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.TryGetFileClass(RoboSharp.RoboSharpConfiguration,RoboSharp.ProcessedFileFlag@)">
            <summary>
            Try to get the corresponding <see cref="T:RoboSharp.ProcessedFileFlag"/> that was assigned to this object
            </summary>
            <inheritdoc cref="M:RoboSharp.ProcessedFileInfo.TryGetDirectoryClass(RoboSharp.RoboSharpConfiguration,RoboSharp.ProcessedDirectoryFlag@)"/>
        </member>
        <member name="M:RoboSharp.ProcessedFileInfo.TryGetDirectoryClass(RoboSharp.RoboSharpConfiguration,RoboSharp.ProcessedDirectoryFlag@)">
            <summary>
            Try to get the corresponding <see cref="T:RoboSharp.ProcessedDirectoryFlag"/> that was 
            </summary>
            <param name="conf">The RoboSharpConfiguration that has a matching <see cref="P:RoboSharp.ProcessedFileInfo.FileClass"/> value</param>
            <param name="flag">If found, this will return the located enum value</param>
            <returns>TRUE if a match was found, otherwise false.</returns>
        </member>
        <member name="T:RoboSharp.Results.IResultsBuilder">
            <summary>
            Interface consumers can use to easily build a set of <see cref="T:RoboSharp.Results.RoboCopyResults"/>
            </summary>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.Source">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.Source"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.Destination">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.Destination"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.JobName">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.JobName"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.CommandOptions">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.CommandOptions"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.LogLines">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.LogLines"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.BytesStatistic">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.BytesStatistic"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.FilesStatistic">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.FilesStatistic"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.DirectoriesStatistic">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.DirectoriesStatistic"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.SpeedStatistic">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.SpeedStatistic"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.StartTime">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.StartTime"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.EndTime">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.EndTime"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.ExitStatus">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.Status"/>
        </member>
        <member name="P:RoboSharp.Results.IResultsBuilder.CommandErrors">
            <inheritdoc cref="P:RoboSharp.Results.RoboCopyResults.RoboCopyErrors"/>
        </member>
        <member name="T:RoboSharp.Results.ProgressEstimator">
            <summary>
            Object that provides <see cref="T:RoboSharp.Interfaces.IStatistic"/> objects whose events can be bound to report estimated RoboCommand progress periodically.
            <br/>
            Note: Only works properly with /V verbose set TRUE.
            </summary>
            <remarks>
            Subscribe to <see cref="E:RoboSharp.RoboCommand.OnProgressEstimatorCreated"/> or <see cref="E:RoboSharp.RoboQueue.OnProgressEstimatorCreated"/> to be notified when the ProgressEstimator becomes available for binding <br/>
            Create event handler to subscribe to the Events you want to handle: <para/>
            <code>
            private void OnProgressEstimatorCreated(object sender, Results.ProgressEstimatorCreatedEventArgs e) { <br/>
            e.ResultsEstimate.ByteStats.PropertyChanged += ByteStats_PropertyChanged;<br/>
            e.ResultsEstimate.DirStats.PropertyChanged += DirStats_PropertyChanged;<br/>
            e.ResultsEstimate.FileStats.PropertyChanged += FileStats_PropertyChanged;<br/>
            }<br/>
            </code>
            <para/>
            <see href="https://github.com/tjscience/RoboSharp/wiki/ProgressEstimator"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.#ctor(RoboSharp.Interfaces.IRoboCommand)">
            <summary>
            Create a new ProgressEstimator object
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="P:RoboSharp.Results.ProgressEstimator.CurrentDir">
            <summary>Used for providing Source Directory in CopyProgressChanged args</summary>
        </member>
        <member name="P:RoboSharp.Results.ProgressEstimator.CurrentFile">
            <summary>Used for providing Source Directory in CopyProgressChanged args AND for byte Statistic</summary>
        </member>
        <member name="P:RoboSharp.Results.ProgressEstimator.CurrentFile_SpecialHandling">
            <summary> Marked as TRUE if this is LIST ONLY mode or the file is 0KB  -- Value set during 'AddFile' method </summary>
        </member>
        <member name="F:RoboSharp.Results.ProgressEstimator.UpdatePeriod">
            <summary> Update Period in milliseconds to push Updates to a UI or RoboQueueProgressEstimator </summary>
        </member>
        <member name="F:RoboSharp.Results.ProgressEstimator.CurrentFileLock">
            <summary>Thread Lock for CurrentFile</summary>
        </member>
        <member name="F:RoboSharp.Results.ProgressEstimator.CurrentDirLock">
            <summary>Thread Lock for CurrentDir</summary>
        </member>
        <member name="F:RoboSharp.Results.ProgressEstimator.DirLock">
            <summary>Thread Lock for tmpDir</summary>
        </member>
        <member name="F:RoboSharp.Results.ProgressEstimator.FileLock">
            <summary>Thread Lock for tmpFile and tmpByte</summary>
        </member>
        <member name="F:RoboSharp.Results.ProgressEstimator.UpdateLock">
            <summary>Thread Lock for NextUpdatePush and UpdateTaskTrgger</summary>
        </member>
        <member name="F:RoboSharp.Results.ProgressEstimator.NextUpdatePush">
            <summary>Time the next update will be pushed to the UI </summary>
        </member>
        <member name="F:RoboSharp.Results.ProgressEstimator.UpdateTaskTrigger">
            <summary>TCS that the UpdateTask awaits on </summary>
        </member>
        <member name="F:RoboSharp.Results.ProgressEstimator.UpdateTaskCancelSource">
            <summary>While !Cancelled, UpdateTask continues looping </summary>
        </member>
        <member name="P:RoboSharp.Results.ProgressEstimator.DirectoriesStatistic">
            <summary>
            Estimate of current number of directories processed while the job is still running. <br/>
            Estimate is provided by parsing of the LogLines produces by RoboCopy.
            </summary>
        </member>
        <member name="P:RoboSharp.Results.ProgressEstimator.FilesStatistic">
            <summary>
            Estimate of current number of files processed while the job is still running. <br/>
            Estimate is provided by parsing of the LogLines produces by RoboCopy.
            </summary>
        </member>
        <member name="P:RoboSharp.Results.ProgressEstimator.BytesStatistic">
            <summary>
            Estimate of current number of bytes processed while the job is still running. <br/>
            Estimate is provided by parsing of the LogLines produces by RoboCopy.
            </summary>
        </member>
        <member name="T:RoboSharp.Results.ProgressEstimator.UIUpdateEventHandler">
            <summary>  </summary>
        </member>
        <member name="E:RoboSharp.Results.ProgressEstimator.ValuesUpdated">
            <inheritdoc cref="E:RoboSharp.Interfaces.IProgressEstimator.ValuesUpdated"/>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.GetExitCode">
            <summary>
            Parse this object's stats into a <see cref="T:RoboSharp.Results.RoboCopyExitCodes"/> enum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.GetExitCode(RoboSharp.Interfaces.IStatistic,RoboSharp.Interfaces.IStatistic)">
            <summary>
            Parse the Statistics into a <see cref="T:RoboSharp.Results.RoboCopyExitCodes"/> enum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.GetResults">
            <summary>
            Repackage the statistics into a new <see cref="T:RoboSharp.Results.RoboCopyResults"/> object
            </summary>
            <remarks>
            Used by ResultsBuilder as starting point for the results. 
            </remarks>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.FinalizeResults">
            <summary>
            Tabulate the final results - should only be called when no more processed files will be added to the estimator
            </summary>
            <remarks>
            Should not be used anywhere else, as it kills the worker thread that calculates the Statistics objects.
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.AddDir(RoboSharp.ProcessedFileInfo)">
            <summary>Increment <see cref="P:RoboSharp.Results.ProgressEstimator.DirectoriesStatistic"/></summary>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.AddDirCopied(RoboSharp.ProcessedFileInfo)">
            <summary>
            Sets the <see cref="P:RoboSharp.Results.ProgressEstimator.CurrentDir"/> and adds 1 to the directories Copied stat
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.AddDirSkipped(RoboSharp.ProcessedFileInfo)">
            <summary>
            Adds 1 to the directories Skipped stat
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.ProcessPreviousFile">
            <summary>
            Performs final processing of the previously added file if needed.
            </summary>
            <remarks>
            This is already called inside of <see cref="M:RoboSharp.Results.ProgressEstimator.AddFile(RoboSharp.ProcessedFileInfo)"/>, but is not called by any method with a WhereTo suffix, such as <see cref="M:RoboSharp.Results.ProgressEstimator.AddFileCopied(RoboSharp.ProcessedFileInfo)"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.AddFile(RoboSharp.ProcessedFileInfo)">
            <summary>
            Call this method after determining what to do with a file, but before starting to copy it.<br/>
            Compares the <see cref="P:RoboSharp.ProcessedFileInfo.FileClass"/> against the configuration strings to identify how to process the file. <br/>
            Also compares against the current <see cref="T:RoboSharp.SelectionOptions"/> and <see cref="T:RoboSharp.CopyOptions"/> to determine if the file should be copied or skipped.
            </summary>
            <remarks>
            Standard Operation: Robocopy reports that it has determined what to do with a file, reports that determination, then starts reporting copy progress. <br/> <br/>
            Notes for Custom Implementations: 
            <br/> - <see cref="M:RoboSharp.Results.ProgressEstimator.SetCopyOpStarted"/> and <see cref="M:RoboSharp.Results.ProgressEstimator.AddFileCopied(RoboSharp.ProcessedFileInfo)"/> should be used if using this method.
            <br/> - Should not be used if <see cref="M:RoboSharp.Results.ProgressEstimator.PerformByteCalc(RoboSharp.ProcessedFileInfo,RoboSharp.Results.ProgressEstimator.WhereToAdd)"/> is used.
            </remarks>
            <param name="currentFile">The file that was just added to the stack</param>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.SkippedOrCopied(RoboSharp.ProcessedFileInfo,System.Boolean)">
            <summary>
            Method meant only to be called from AddFile method while SpecialHandling is true - helps normalize code and avoid repetition
            </summary>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.SetCopyOpStarted">
            <summary>Catch start copy progress of large files ( Called when progress less than 100% )</summary>
            <remarks>
            For Custom Implementations: <br/>
            - <see cref="M:RoboSharp.Results.ProgressEstimator.AddFile(RoboSharp.ProcessedFileInfo)"/> should have been called prior to this being called. <br/>
            - Should use <see cref="M:RoboSharp.Results.ProgressEstimator.AddFileCopied(RoboSharp.ProcessedFileInfo)"/> after progress reaches 100% <br/><br/>
            !! Should not be used if <see cref="M:RoboSharp.Results.ProgressEstimator.PerformByteCalc(RoboSharp.ProcessedFileInfo,RoboSharp.Results.ProgressEstimator.WhereToAdd)"/> is used.
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.AddFileCopied(RoboSharp.ProcessedFileInfo)">
            <summary>Increment <see cref="F:RoboSharp.Results.ProgressEstimator.FileStatsField"/>.Copied ( Triggered when copy progress = 100% ) </summary>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.AddFileFailed(RoboSharp.ProcessedFileInfo,System.Boolean)">
            <summary>Increment <see cref="F:RoboSharp.Results.ProgressEstimator.FileStatsField"/>.Failed </summary>
            <param name="currentFile"/>
            <param name="DecrementCopied">Set this TRUE if you also wish to decrease the <see cref="P:RoboSharp.Results.Statistic.Copied"/> values accordingly </param>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.AddFileSkipped(RoboSharp.ProcessedFileInfo)">
            <summary>Increment <see cref="F:RoboSharp.Results.ProgressEstimator.FileStatsField"/>.Skipped</summary>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.AddFileMisMatch(RoboSharp.ProcessedFileInfo)">
            <summary>Increment <see cref="F:RoboSharp.Results.ProgressEstimator.FileStatsField"/>.MisMatch</summary>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.AddFileExtra(RoboSharp.ProcessedFileInfo)">
            <summary>Increment <see cref="F:RoboSharp.Results.ProgressEstimator.FileStatsField"/>.Extra</summary>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.PerformByteCalc(RoboSharp.ProcessedFileInfo,RoboSharp.Results.ProgressEstimator.WhereToAdd)">
            <summary>
            Adds the file statistics to the <see cref="P:RoboSharp.Results.ProgressEstimator.BytesStatistic"/> and the <see cref="P:RoboSharp.Results.ProgressEstimator.FilesStatistic"/> internal counters.
            </summary>
            <remarks>
            This method resets internal flags that other methods set to log how the current file should be handled. <br/>
            As such, if using this method for pushing updates to the estimator, no other methods that accept files should be used.
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.StartUpdateTask(System.Threading.CancellationTokenSource@)">
            <summary>
            Creates a LongRunning task that is meant to periodically push out Updates to the UI on a thread isolated from the event thread.
            </summary>
            <param name="CancelSource"></param>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.Results.ProgressEstimator.PushUpdate">
            <summary>
            Push the update to the public Stat Objects
            </summary>
        </member>
        <member name="T:RoboSharp.Results.ResultsBuilder">
            <summary>
            Helper class to build a <see cref="T:RoboSharp.Results.RoboCopyResults"/> object.
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/ResultsBuilder"/>
            </remarks>
        </member>
        <member name="F:RoboSharp.Results.ResultsBuilder.RoboCommand">
            <summary>Reference back to the RoboCommand that spawned this object</summary>
        </member>
        <member name="P:RoboSharp.Results.ResultsBuilder.LastLine">
            <summary>This is the last line that was logged.</summary>
        </member>
        <member name="P:RoboSharp.Results.ResultsBuilder.CommandOptions">
            <see cref="P:RoboSharp.RoboCommand.CommandOptions"/>
        </member>
        <member name="P:RoboSharp.Results.ResultsBuilder.Source">
            <inheritdoc cref="P:RoboSharp.CopyOptions.Source"/>
        </member>
        <member name="P:RoboSharp.Results.ResultsBuilder.Destination">
            <inheritdoc cref="P:RoboSharp.CopyOptions.Destination"/>
        </member>
        <member name="P:RoboSharp.Results.ResultsBuilder.Estimator">
            <inheritdoc cref="T:RoboSharp.Results.ProgressEstimator"/>
        </member>
        <member name="M:RoboSharp.Results.ResultsBuilder.AddOutput(System.String)">
            <summary>
            Add a LogLine reported by RoboCopy to the LogLines list.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.ResultsBuilder.BuildResults(System.Int32,System.Boolean)">
            <summary>
            Builds the results from parsing the logLines.
            </summary>
            <param name="exitCode"></param>
            <param name="IsProgressUpdateEvent">This is used by the ProgressUpdateEventArgs to ignore the loglines when generating the estimate </param>
            <returns></returns>
        </member>
        <member name="T:RoboSharp.Results.RoboCopyExitCodes">
            <summary>
            RoboCopy Exit Codes
            </summary>
            <remarks><see href="https://ss64.com/nt/robocopy-exit.html"/></remarks>
        </member>
        <member name="F:RoboSharp.Results.RoboCopyExitCodes.NoErrorNoCopy">
            <summary>No Files Copied, No Errors Occured</summary>
        </member>
        <member name="F:RoboSharp.Results.RoboCopyExitCodes.FilesCopiedSuccessful">
            <summary>One or more files were copied successfully</summary>
        </member>
        <member name="F:RoboSharp.Results.RoboCopyExitCodes.ExtraFilesOrDirectoriesDetected">
            <summary>
            Some Extra files or directories were detected.<br/>
            Examine the output log for details. 
            </summary>
        </member>
        <member name="F:RoboSharp.Results.RoboCopyExitCodes.MismatchedDirectoriesDetected">
            <summary>
            Some Mismatched files or directories were detected.<br/>
            Examine the output log. Housekeeping might be required.
            </summary>
        </member>
        <member name="F:RoboSharp.Results.RoboCopyExitCodes.SomeFilesOrDirectoriesCouldNotBeCopied">
            <summary>
            Some files or directories could not be copied <br/>
            (copy errors occurred and the retry limit was exceeded).
            Check these errors further.
            </summary>
        </member>
        <member name="F:RoboSharp.Results.RoboCopyExitCodes.SeriousErrorOccurred">
            <summary>
            Serious error. Robocopy did not copy any files.<br/>
            Either a usage error or an error due to insufficient access privileges on the source or destination directories.
            </summary>
        </member>
        <member name="F:RoboSharp.Results.RoboCopyExitCodes.Cancelled">
            <summary>
            The Robocopy process exited prior to completion
            </summary>
        </member>
        <member name="T:RoboSharp.Results.RoboCopyResults">
            <summary>
            Results provided by the RoboCopy command. Includes the Log, Exit Code, and statistics parsed from the log.
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/RoboCopyResults"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResults.#ctor(System.String,System.String,RoboSharp.Interfaces.IStatistic,RoboSharp.Interfaces.IStatistic,RoboSharp.Interfaces.IStatistic,System.DateTime,RoboSharp.Interfaces.ISpeedStatistic,System.DateTime,RoboSharp.Results.RoboCopyExitStatus,System.String[])">
            <summary>
            Constructor available for consumers to use in custom IRoboCommand implementations
            </summary>
            <param name="source">The source folder path</param>
            <param name="destination">The destination folder path</param>
            <param name="bytes">IStatistic object for number of bytes copied</param>
            <param name="files">IStatistic object for number of files processed</param>
            <param name="directories">IStatistic object for number of directories processed</param>
            <param name="speed">ISpeedStatistic object</param>
            <param name="startTime">The time the process was started</param>
            <param name="endTime">The time the process ended. If not specified uses DateTime.Now</param>
            <param name="status">The exit code</param>
            <param name="logLines">Log Lines reported by the process</param>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResults.FromResultsBuilder(RoboSharp.Results.IResultsBuilder)">
            <summary>
            Create a new set of RoboCopyResults via the <see cref="T:RoboSharp.Results.IResultsBuilder"/> interface
            </summary>
            <param name="builder">the object that will provide the results values via the IResultsBuilder interface</param>
            <returns>A new RoboCopyResults object</returns>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.Source">
            <inheritdoc cref="P:RoboSharp.CopyOptions.Source"/>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.Destination">
            <inheritdoc cref="P:RoboSharp.CopyOptions.Destination"/>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.CommandOptions">
            <inheritdoc cref="P:RoboSharp.RoboCommand.CommandOptions"/>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.JobName">
            <inheritdoc cref="P:RoboSharp.RoboCommand.Name"/>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.RoboCopyErrors">
            <summary>
            All Errors that were generated by RoboCopy during the run.
            </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.Status">
            <inheritdoc cref="T:RoboSharp.Results.RoboCopyExitStatus"/>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.DirectoriesStatistic">
            <summary> Information about number of Directories Copied, Skipped, Failed, etc.</summary>
            <remarks> 
            If the job was cancelled, or run without a Job Summary, this will attempt to provide approximate results based on the Process.StandardOutput from Robocopy. <br/>
            Results should only be treated as accurate if <see cref="P:RoboSharp.Results.RoboCopyResults.Status"/>.ExitCodeValue >= 0 and the job was run with <see cref="P:RoboSharp.LoggingOptions.NoJobSummary"/> = FALSE
            </remarks>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.FilesStatistic">
            <summary> Information about number of Files Copied, Skipped, Failed, etc.</summary>
            <remarks> 
            If the job was cancelled, or run without a Job Summary, this will attempt to provide approximate results based on the Process.StandardOutput from Robocopy. <br/>
            Results should only be treated as accurate if <see cref="P:RoboSharp.Results.RoboCopyResults.Status"/>.ExitCodeValue >= 0 and the job was run with <see cref="P:RoboSharp.LoggingOptions.NoJobSummary"/> = FALSE
            </remarks>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.BytesStatistic">
            <summary> Information about number of Bytes processed.</summary>
            <remarks> 
            If the job was cancelled, or run without a Job Summary, this will attempt to provide approximate results based on the Process.StandardOutput from Robocopy. <br/>
            Results should only be treated as accurate if <see cref="P:RoboSharp.Results.RoboCopyResults.Status"/>.ExitCodeValue >= 0 and the job was run with <see cref="P:RoboSharp.LoggingOptions.NoJobSummary"/> = FALSE
            </remarks>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.SpeedStatistic">
            <inheritdoc cref="T:RoboSharp.Results.SpeedStatistic"/>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.LogLines">
            <summary> Output Text reported by RoboCopy </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.StartTime">
            <summary> Time the RoboCopy process was started </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.EndTime">
            <summary> Time the RoboCopy process was completed / cancelled. </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResults.TimeSpan">
            <summary> Length of Time the RoboCopy Process ran </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResults.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:RoboSharp.Results.RoboCopyResultsList">
            <summary>
            Object used to represent results from multiple <see cref="T:RoboSharp.RoboCommand"/>s. <br/>
            As <see cref="T:RoboSharp.Results.RoboCopyResults"/> are added to this object, it will update the Totals and Averages accordingly.<para/>
            Implements:
            <br/><see cref="T:RoboSharp.Interfaces.IRoboCopyResultsList"/>
            <br/><see cref="T:System.Collections.Generic.IList`1"/> where T = RoboCopyResults
            <br/><see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/RoboCopyResultsList"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.#ctor">
            <inheritdoc cref="M:System.Collections.Generic.List`1.#ctor"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.#ctor(RoboSharp.Results.RoboCopyResults)">
            <param name="result">Populate the new List object with this result as the first item.</param>
            <inheritdoc cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.#ctor(System.Collections.Generic.IEnumerable{RoboSharp.Results.RoboCopyResults})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.#ctor(RoboSharp.Results.RoboCopyResultsList)">
            <summary>
            Clone a RoboCopyResultsList into a new object
            </summary>
        </member>
        <member name="T:RoboSharp.Results.RoboCopyResultsList.ResultsListUpdated">
            <summary>
            Delegate for objects to send notification that the list behind an <see cref="T:RoboSharp.Interfaces.IRoboCopyResultsList"/> interface has been updated
            </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResultsList.DirectoriesStatistic">
            <summary> Sum of all DirectoryStatistics objects </summary>
            <remarks>Underlying value is Lazy{Statistic} object - Initial value not calculated until first request. </remarks>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResultsList.BytesStatistic">
            <summary> Sum of all ByteStatistics objects </summary>
            <remarks>Underlying value is Lazy{Statistic} object - Initial value not calculated until first request. </remarks>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResultsList.FilesStatistic">
            <summary> Sum of all FileStatistics objects </summary>
            <remarks>Underlying value is Lazy{Statistic} object - Initial value not calculated until first request. </remarks>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResultsList.SpeedStatistic">
            <summary> Average of all SpeedStatistics objects </summary>
            <remarks>Underlying value is Lazy{SpeedStatistic} object - Initial value not calculated until first request. </remarks>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResultsList.Status">
            <summary> Sum of all RoboCopyExitStatus objects </summary>
            <remarks>Underlying value is Lazy object - Initial value not calculated until first request. </remarks>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResultsList.Collection">
            <summary> The Collection of RoboCopy Results. Add/Removal of <see cref="T:RoboSharp.Results.RoboCopyResults"/> objects must be performed through this object's methods, not on the list directly. </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResultsList.Count">
            <inheritdoc cref="P:System.Collections.Generic.List`1.Count"/>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyResultsList.Item(System.Int32)">
            <summary>
            Get or Set the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to Get or Set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.GetByteStatistics">
            <summary>
            Get a snapshot of the ByteStatistics objects from this list.
            </summary>
            <returns>New array of the ByteStatistic objects</returns>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.GetDirectoriesStatistics">
            <summary>
            Get a snapshot of the DirectoriesStatistic objects from this list.
            </summary>
            <returns>New array of the DirectoriesStatistic objects</returns>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.GetFilesStatistics">
            <summary>
            Get a snapshot of the FilesStatistic objects from this list.
            </summary>
            <returns>New array of the FilesStatistic objects</returns>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.GetStatuses">
            <summary>
            Get a snapshot of the FilesStatistic objects from this list.
            </summary>
            <returns>New array of the FilesStatistic objects</returns>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.GetSpeedStatistics">
            <summary>
            Get a snapshot of the FilesStatistic objects from this list.
            </summary>
            <returns>New array of the FilesStatistic objects</returns>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.GetErrors">
            <summary>
            Combine the <see cref="P:RoboSharp.Results.RoboCopyResults.RoboCopyErrors"/> into a single array of errors
            </summary>
            <returns>New array of the ErrorEventArgs objects</returns>
        </member>
        <member name="E:RoboSharp.Results.RoboCopyResultsList.CollectionChanged">
            <summary>
            <inheritdoc cref="E:RoboSharp.ObservableList`1.CollectionChanged"/>
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Process the Added/Removed items, then fire the event</summary>
            <inheritdoc cref="M:RoboSharp.ObservableList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.Clone">
            <summary> Clone this object to a new RoboCopyResultsList </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.IndexOf(RoboSharp.Results.RoboCopyResults)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.IndexOf(`0)"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.Insert(System.Int32,RoboSharp.Results.RoboCopyResults)">
            <inheritdoc cref="M:RoboSharp.ObservableList`1.Insert(System.Int32,`0)"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.RemoveAt(System.Int32)">
            <inheritdoc cref="M:RoboSharp.ObservableList`1.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.Add(RoboSharp.Results.RoboCopyResults)">
            <inheritdoc cref="M:RoboSharp.ObservableList`1.Add(`0)"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.Clear">
            <inheritdoc cref="M:RoboSharp.ObservableList`1.Clear"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.Contains(RoboSharp.Results.RoboCopyResults)">
            <inheritdoc cref="M:System.Collections.IList.Contains(System.Object)"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.CopyTo(RoboSharp.Results.RoboCopyResults[],System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.Remove(RoboSharp.Results.RoboCopyResults)">
            <inheritdoc cref="M:RoboSharp.ObservableList`1.Remove(`0)"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyResultsList.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.List`1.GetEnumerator"/>
        </member>
        <member name="T:RoboSharp.Results.RoboCopyExitStatus">
            <summary>
            Object that evaluates the ExitCode reported after RoboCopy finishes executing.
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/RoboCopyExitStatus"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyExitStatus.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyExitStatus.#ctor(RoboSharp.Results.RoboCopyExitCodes)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyExitStatus.ExitCodeValue">
            <summary>ExitCode as reported by RoboCopy</summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyExitStatus.ExitCode">
            <summary>ExitCode reported by RoboCopy converted into the Enum</summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyExitStatus.Successful">
            <inheritdoc cref="F:RoboSharp.Results.RoboCopyExitCodes.FilesCopiedSuccessful"/>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyExitStatus.HasWarnings">
            <inheritdoc cref="F:RoboSharp.Results.RoboCopyExitCodes.MismatchedDirectoriesDetected"/>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyExitStatus.HasErrors">
            <inheritdoc cref="F:RoboSharp.Results.RoboCopyExitCodes.SeriousErrorOccurred"/>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyExitStatus.WasCancelled">
            <inheritdoc cref="F:RoboSharp.Results.RoboCopyExitCodes.Cancelled"/>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyExitStatus.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:RoboSharp.Results.RoboCopyCombinedExitStatus">
            <summary>
            Represents the combination of multiple Exit Statuses
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyCombinedExitStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RoboSharp.Results.RoboCopyCombinedExitStatus"/> class.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyCombinedExitStatus.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RoboSharp.Results.RoboCopyCombinedExitStatus"/> class.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyCombinedExitStatus.#ctor(RoboSharp.Results.RoboCopyCombinedExitStatus)">
            <summary>
            Clone this into a new instance
            </summary>
            <param name="obj"></param>
        </member>
        <member name="E:RoboSharp.Results.RoboCopyCombinedExitStatus.PropertyChanged">
            <summary>This event when the ExitStatus summary has changed </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyCombinedExitStatus.WasCancelled">
            <summary>Overides <see cref="P:RoboSharp.Results.RoboCopyExitStatus.WasCancelled"/></summary>
            <returns> <see cref="P:RoboSharp.Results.RoboCopyCombinedExitStatus.AnyWasCancelled"/></returns>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyCombinedExitStatus.AnyNoCopyNoError">
            <summary>
            Atleast one <see cref="T:RoboSharp.Results.RoboCopyExitStatus"/> objects combined into this result resulted in no errors and no files/directories copied.
            </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyCombinedExitStatus.AnyWasCancelled">
            <summary>
            Atleast one <see cref="T:RoboSharp.Results.RoboCopyExitStatus"/> object combined into this result had been cancelled / exited prior to completion.
            </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyCombinedExitStatus.AllSuccessful">
            <summary>
            All jobs completed without errors or warnings.
            </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboCopyCombinedExitStatus.AllSuccessful_WithWarnings">
            <summary>
            All jobs completed without errors or warnings, but Extra Files/Folders were detected.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyCombinedExitStatus.CombineStatus(RoboSharp.Results.RoboCopyExitStatus)">
            <summary>
            Combine the RoboCopyExitCodes of the supplied ExitStatus with this ExitStatus.
            </summary>
            <remarks>If any were Cancelled, set the WasCancelled property to TRUE. Otherwise combine the exit codes.</remarks>
            <param name="status">ExitStatus to combine with</param>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyCombinedExitStatus.CombineStatus(System.Collections.Generic.IEnumerable{RoboSharp.Results.RoboCopyExitStatus})">
            <summary>
            Combine all the RoboCopyExitStatuses together.
            </summary>
            <param name="status">Array or List of ExitStatuses to combine.</param>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyCombinedExitStatus.CombineStatuses(System.Collections.Generic.IEnumerable{RoboSharp.Results.RoboCopyExitStatus})">
            <summary>
            Combine all the RoboCopyExitStatuses together.
            </summary>
            <param name="statuses">Array or List of ExitStatuses to combine.</param>
            <returns> new RoboCopyExitStatus object </returns>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyCombinedExitStatus.Reset">
            <summary>
            Reset the value of the object
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyCombinedExitStatus.Reset(System.Boolean)">
            <summary>
            Reset the value of the object
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboCopyCombinedExitStatus.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="T:RoboSharp.Results.RoboQueueProgressEstimator">
            <summary>
            Updates the Statistics every 250ms
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/RoboQueueProgressEstimator"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueProgressEstimator.#ctor">
            <summary>
            Create a new ProgressEstimator
            </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueProgressEstimator.DirectoriesStatistic">
            <summary>
            Estimate of current number of directories processed while the job is still running. <br/>
            Estimate is provided by parsing of the LogLines produces by RoboCopy.
            </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueProgressEstimator.FilesStatistic">
            <summary>
            Estimate of current number of files processed while the job is still running. <br/>
            Estimate is provided by parsing of the LogLines produces by RoboCopy.
            </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueProgressEstimator.BytesStatistic">
            <summary>
            Estimate of current number of bytes processed while the job is still running. <br/>
            Estimate is provided by parsing of the LogLines produces by RoboCopy.
            </summary>
        </member>
        <member name="E:RoboSharp.Results.RoboQueueProgressEstimator.ValuesUpdated">
            <inheritdoc cref="E:RoboSharp.Interfaces.IProgressEstimator.ValuesUpdated"/>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueProgressEstimator.GetExitCode">
            <summary>
            Parse this object's stats into a <see cref="T:RoboSharp.Results.RoboCopyExitCodes"/> enum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueProgressEstimator.BindToProgressEstimator(RoboSharp.Interfaces.IProgressEstimator)">
            <summary>
            Subscribe to the update events of a <see cref="T:RoboSharp.Results.ProgressEstimator"/> object
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueProgressEstimator.UnBind">
            <summary>
            Unsubscribe from all bound Statistic objects
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueProgressEstimator.CancelTasks">
            <summary>
            Unbind all the ProgressEstimators, then raise <see cref="E:RoboSharp.Results.RoboQueueProgressEstimator.ValuesUpdated"/> to clear out any pending updates.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueProgressEstimator.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueProgressEstimator.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueProgressEstimator.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:RoboSharp.Results.RoboQueueResults">
            <summary>
            Object returned by RoboQueue when a run has completed.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueResults.Add(RoboSharp.Results.RoboCopyResults)">
            <summary>
            Add a result to the collection
            </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.StartTime">
            <summary> Time the RoboQueue task was started </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.EndTime">
            <summary> Time the RoboQueue task was completed / cancelled. </summary>
            <remarks> Should Only considered valid if <see cref="P:RoboSharp.Results.RoboQueueResults.QueueComplete"/> = true.</remarks>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.TimeSpan">
            <summary> Length of Time RoboQueue was running </summary>
            <remarks> Should Only considered valid if <see cref="P:RoboSharp.Results.RoboQueueResults.QueueComplete"/> = true.</remarks>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.QueueRunning">
            <summary> TRUE if the RoboQueue object that created this results set has not finished running yet. </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.QueueComplete">
            <summary> TRUE if the RoboQueue object that created this results has completed running, or has been cancelled. </summary>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.DirectoriesStatistic">
            <inheritdoc cref="P:RoboSharp.Interfaces.IRoboCopyResultsList.DirectoriesStatistic"/>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.BytesStatistic">
            <inheritdoc cref="P:RoboSharp.Interfaces.IRoboCopyResultsList.BytesStatistic"/>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.FilesStatistic">
            <inheritdoc cref="P:RoboSharp.Interfaces.IRoboCopyResultsList.FilesStatistic"/>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.SpeedStatistic">
            <inheritdoc cref="P:RoboSharp.Interfaces.IRoboCopyResultsList.SpeedStatistic"/>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.Status">
            <inheritdoc cref="P:RoboSharp.Interfaces.IRoboCopyResultsList.Status"/>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.Collection">
            <inheritdoc cref="P:RoboSharp.Interfaces.IRoboCopyResultsList.Collection"/>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.Count">
            <inheritdoc cref="P:RoboSharp.Interfaces.IRoboCopyResultsList.Count"/>
        </member>
        <member name="P:RoboSharp.Results.RoboQueueResults.Item(System.Int32)">
            <summary>Gets the <see cref="T:RoboSharp.Results.RoboCopyResults"/> object at the specified index. </summary>
        </member>
        <member name="E:RoboSharp.Results.RoboQueueResults.CollectionChanged">
            <inheritdoc cref="E:RoboSharp.Results.RoboCopyResultsList.CollectionChanged"/>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueResults.GetByteStatistics">
            <inheritdoc cref="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetByteStatistics"/>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueResults.GetDirectoriesStatistics">
            <inheritdoc cref="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetDirectoriesStatistics"/>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueResults.GetEnumerator">
            <inheritdoc cref="M:RoboSharp.Results.RoboCopyResultsList.GetEnumerator"/>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueResults.GetFilesStatistics">
            <inheritdoc cref="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetFilesStatistics"/>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueResults.GetSpeedStatistics">
            <inheritdoc cref="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetSpeedStatistics"/>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueResults.GetStatuses">
            <inheritdoc cref="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetStatuses"/>
        </member>
        <member name="M:RoboSharp.Results.RoboQueueResults.GetErrors">
            <inheritdoc cref="M:RoboSharp.Interfaces.IRoboCopyResultsList.GetErrors"/>
        </member>
        <member name="T:RoboSharp.Results.SpeedStatistic">
            <summary>
            Contains information regarding average Transfer Speed. <br/>
            Note: Runs that do not perform any copy operations or that exited prematurely ( <see cref="F:RoboSharp.Results.RoboCopyExitCodes.Cancelled"/> ) will result in a null <see cref="T:RoboSharp.Results.SpeedStatistic"/> object.
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/SpeedStatistic"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.SpeedStatistic.#ctor">
            <summary>
            Create new SpeedStatistic
            </summary>
        </member>
        <member name="M:RoboSharp.Results.SpeedStatistic.#ctor(RoboSharp.Interfaces.ISpeedStatistic)">
            <summary>
            Clone a SpeedStatistic
            </summary>
        </member>
        <member name="M:RoboSharp.Results.SpeedStatistic.#ctor(System.Int64,System.TimeSpan)">
            <summary>
            Create a new SpeesdStatistic from a file length and a copy time
            </summary>
            <param name="fileLength">The file length in Bytes</param>
            <param name="copyTime">How long the file took top copy</param>
        </member>
        <member name="P:RoboSharp.Results.SpeedStatistic.EnablePropertyChangeEvent">
            <summary> This toggle Enables/Disables firing the <see cref="E:RoboSharp.Results.SpeedStatistic.PropertyChanged"/> Event to avoid firing it when doing multiple consecutive changes to the values </summary>
        </member>
        <member name="E:RoboSharp.Results.SpeedStatistic.PropertyChanged">
            <summary>This event will fire when the value of the SpeedStatistic is updated </summary>
        </member>
        <member name="M:RoboSharp.Results.SpeedStatistic.OnPropertyChange(System.String)">
            <summary>Raise Property Change Event</summary>
        </member>
        <member name="P:RoboSharp.Results.SpeedStatistic.BytesPerSec">
            <inheritdoc cref="P:RoboSharp.Interfaces.ISpeedStatistic.BytesPerSec"/>
        </member>
        <member name="P:RoboSharp.Results.SpeedStatistic.MegaBytesPerMin">
            <inheritdoc cref="P:RoboSharp.Interfaces.ISpeedStatistic.MegaBytesPerMin"/>
        </member>
        <member name="M:RoboSharp.Results.SpeedStatistic.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.SpeedStatistic.GetBytesPerSecond">
            <summary>
            Gets the BytesPerSec as a string
            </summary>
            <returns>$"{BytesPerSec} Bytes/sec"</returns>
        </member>
        <member name="M:RoboSharp.Results.SpeedStatistic.GetMegaBytesPerMin">
            <summary>
            Gets the MegaBytesPerMin as a string
            </summary>
            <returns>$"{MegaBytesPerMin} MegaBytes/min"</returns>
        </member>
        <member name="M:RoboSharp.Results.SpeedStatistic.Clone">
            <inheritdoc cref="M:RoboSharp.Interfaces.ISpeedStatistic.Clone"/>
        </member>
        <member name="T:RoboSharp.Results.AverageSpeedStatistic">
            <summary>
            This object represents the Average of several <see cref="T:RoboSharp.Results.SpeedStatistic"/> objects, and contains 
            methods to facilitate that functionality.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.#ctor">
            <summary>
            Initialize a new <see cref="T:RoboSharp.Results.AverageSpeedStatistic"/> object with the default values.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.#ctor(RoboSharp.Interfaces.ISpeedStatistic)">
            <summary>
            Initialize a new <see cref="T:RoboSharp.Results.AverageSpeedStatistic"/> object. <br/>
            Values will be set to the return values of <see cref="P:RoboSharp.Results.SpeedStatistic.BytesPerSec"/> and <see cref="P:RoboSharp.Results.SpeedStatistic.MegaBytesPerMin"/> <br/>
            </summary>
            <param name="speedStat">
            Either a <see cref="T:RoboSharp.Results.SpeedStatistic"/> or a <see cref="T:RoboSharp.Results.AverageSpeedStatistic"/> object. <br/>
            If a <see cref="T:RoboSharp.Results.AverageSpeedStatistic"/> is passed into this constructor, it wil be treated as the base <see cref="T:RoboSharp.Results.SpeedStatistic"/> instead.
            </param>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.#ctor(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.ISpeedStatistic})">
            <summary>
            Initialize a new <see cref="T:RoboSharp.Results.AverageSpeedStatistic"/> object using <see cref="M:RoboSharp.Results.AverageSpeedStatistic.Average(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.ISpeedStatistic})"/>. <br/>
            </summary>
            <param name="speedStats"><inheritdoc cref="M:RoboSharp.Results.AverageSpeedStatistic.Average(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.ISpeedStatistic})"/></param>
            <inheritdoc cref="M:RoboSharp.Results.AverageSpeedStatistic.Average(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.ISpeedStatistic})"/>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.#ctor(RoboSharp.Results.AverageSpeedStatistic)">
            <summary>
            Clone an AverageSpeedStatistic
            </summary>
        </member>
        <member name="F:RoboSharp.Results.AverageSpeedStatistic.Combined_BytesPerSec">
            <summary> Sum of all <see cref="P:RoboSharp.Results.SpeedStatistic.BytesPerSec"/> </summary>
        </member>
        <member name="F:RoboSharp.Results.AverageSpeedStatistic.Combined_MegaBytesPerMin">
            <summary>  Sum of all <see cref="P:RoboSharp.Results.SpeedStatistic.MegaBytesPerMin"/> </summary>
        </member>
        <member name="F:RoboSharp.Results.AverageSpeedStatistic.Divisor">
            <summary> Total number of SpeedStats that were combined to produce the Combined_* values </summary>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.Reset">
            <summary>
            Set the values for this object to 0
            </summary>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.Reset(System.Boolean)">
            <summary>
            Set the values for this object to 0
            </summary>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.Add(RoboSharp.Interfaces.ISpeedStatistic,System.Boolean)">
            <summary>
            Add the results of the supplied SpeedStatistic objects to this object. <br/>
            Does not automatically recalculate the average, and triggers no events.
            </summary>
            <remarks>
            If any supplied Speedstat object is actually an <see cref="T:RoboSharp.Results.AverageSpeedStatistic"/> object, default functionality will combine the private fields
            used to calculate the average speed instead of using the publicly reported speeds. <br/>
            This ensures that combining the average of multiple <see cref="T:RoboSharp.Results.AverageSpeedStatistic"/> objects returns the correct value. <br/>
            Ex: One object with 2 runs and one with 3 runs will return the average of all 5 runs instead of the average of two averages.
            </remarks>
            <param name="stat">SpeedStatistic Item to add</param>
            <param name="ForceTreatAsSpeedStat">        
            Setting this to TRUE will instead combine the calculated average of the <see cref="T:RoboSharp.Results.AverageSpeedStatistic"/>, treating it as a single <see cref="T:RoboSharp.Results.SpeedStatistic"/> object. <br/>
            Ignore the private fields, and instead use the calculated speeds)
            </param>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.Add(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.ISpeedStatistic},System.Boolean)">
            <summary>
            Add the supplied SpeedStatistic collection to this object.
            </summary>
            <param name="stats">SpeedStatistic collection to add</param>
            <param name="ForceTreatAsSpeedStat"><inheritdoc cref="M:RoboSharp.Results.AverageSpeedStatistic.Add(RoboSharp.Interfaces.ISpeedStatistic,System.Boolean)"/></param>
            <inheritdoc cref="M:RoboSharp.Results.AverageSpeedStatistic.Add(RoboSharp.Interfaces.ISpeedStatistic,System.Boolean)" path="/remarks"/>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.Subtract(RoboSharp.Results.SpeedStatistic,System.Boolean)">
            <summary>
            Subtract the results of the supplied SpeedStatistic objects from this object.<br/>
            </summary>
            <param name="stat">Statistics Item to add</param>
            <param name="ForceTreatAsSpeedStat"><inheritdoc cref="M:RoboSharp.Results.AverageSpeedStatistic.Add(RoboSharp.Interfaces.ISpeedStatistic,System.Boolean)"/></param>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.Subtract(System.Collections.Generic.IEnumerable{RoboSharp.Results.SpeedStatistic},System.Boolean)">
            <summary>
            Subtract the supplied SpeedStatistic collection from this object.
            </summary>
            <param name="stats">SpeedStatistic collection to subtract</param>
            <param name="ForceTreatAsSpeedStat"><inheritdoc cref="M:RoboSharp.Results.AverageSpeedStatistic.Add(RoboSharp.Interfaces.ISpeedStatistic,System.Boolean)"/></param>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.CalculateAverage">
            <summary>
            Immediately recalculate the BytesPerSec and MegaBytesPerMin values
            </summary>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.Average(RoboSharp.Interfaces.ISpeedStatistic)">
            <summary>
            Combine the supplied <see cref="T:RoboSharp.Results.SpeedStatistic"/> objects, then get the average.
            </summary>
            <param name="stat">Stats object</param>
            <inheritdoc cref="M:RoboSharp.Results.AverageSpeedStatistic.Add(RoboSharp.Interfaces.ISpeedStatistic,System.Boolean)" path="/remarks"/>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.Average(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.ISpeedStatistic})">
            <summary>
            Combine the supplied <see cref="T:RoboSharp.Results.SpeedStatistic"/> objects, then get the average.
            </summary>
            <param name="stats">Collection of <see cref="T:RoboSharp.Interfaces.ISpeedStatistic"/> objects</param>
            <inheritdoc cref="M:RoboSharp.Results.AverageSpeedStatistic.Add(RoboSharp.Interfaces.ISpeedStatistic,System.Boolean)" path="/remarks"/>
        </member>
        <member name="M:RoboSharp.Results.AverageSpeedStatistic.GetAverage(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.ISpeedStatistic})">
            <returns>New Statistics Object</returns>
            <inheritdoc cref="M:RoboSharp.Results.AverageSpeedStatistic.Average(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.ISpeedStatistic})"/>
        </member>
        <member name="T:RoboSharp.Results.Statistic">
            <summary>
            Information about number of items Copied, Skipped, Failed, etc.
            <para/>
            <see cref="T:RoboSharp.Results.RoboCopyResults"/> will not typically raise any events, but this object is used for other items, such as <see cref="T:RoboSharp.Results.ProgressEstimator"/> and <see cref="T:RoboSharp.Results.RoboCopyResultsList"/> to present results whose values may update periodically.
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/Statistic"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.Results.Statistic.#ctor">
            <summary> Create a new Statistic object of <see cref="T:RoboSharp.Results.Statistic.StatType"/> </summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.#ctor(RoboSharp.Results.Statistic.StatType)">
            <summary> Create a new Statistic object </summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.#ctor(RoboSharp.Results.Statistic.StatType,System.String)">
            <summary> Create a new Statistic object </summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.#ctor(RoboSharp.Interfaces.IStatistic)">
            <summary> Clone an existing Statistic object</summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.#ctor(RoboSharp.Results.Statistic.StatType,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary> Clone an existing Statistic object</summary>
        </member>
        <member name="T:RoboSharp.Results.Statistic.StatType">
            <summary> Describe the Type of Statistics Object </summary>
        </member>
        <member name="F:RoboSharp.Results.Statistic.StatType.Directories">
            <summary> Statistics object represents count of Directories </summary>
        </member>
        <member name="F:RoboSharp.Results.Statistic.StatType.Files">
            <summary> Statistics object represents count of Files </summary>
        </member>
        <member name="F:RoboSharp.Results.Statistic.StatType.Bytes">
            <summary> Statistics object represents a Size ( number of bytes )</summary>
        </member>
        <member name="F:RoboSharp.Results.Statistic.EnablePropertyChangeEvent">
            <summary> This toggle Enables/Disables firing the <see cref="E:RoboSharp.Results.Statistic.PropertyChanged"/> Event to avoid firing it when doing multiple consecutive changes to the values </summary>
        </member>
        <member name="E:RoboSharp.Results.Statistic.PropertyChanged">
            <summary>
            This event will fire when the value of the statistic is updated via Adding / Subtracting methods. <br/>
            Provides <see cref="T:RoboSharp.EventArgObjects.StatisticPropertyChangedEventArgs"/> object.
            </summary>
            <remarks>
            Allows use with both binding to controls and <see cref="T:RoboSharp.Results.ProgressEstimator"/> binding. <br/>
            EventArgs can be passed into <see cref="M:RoboSharp.Results.Statistic.AddStatistic(System.ComponentModel.PropertyChangedEventArgs)"/> after casting.
            </remarks>
        </member>
        <member name="T:RoboSharp.Results.Statistic.StatChangedHandler">
            <summary>Handles any value changes </summary>
        </member>
        <member name="E:RoboSharp.Results.Statistic.OnTotalChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Results.Statistic.Total"/> Property is updated. </summary>
        </member>
        <member name="E:RoboSharp.Results.Statistic.OnCopiedChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Results.Statistic.Copied"/> Property is updated. </summary>
        </member>
        <member name="E:RoboSharp.Results.Statistic.OnSkippedChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Results.Statistic.Skipped"/> Property is updated. </summary>
        </member>
        <member name="E:RoboSharp.Results.Statistic.OnMisMatchChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Results.Statistic.Mismatch"/> Property is updated. </summary>
        </member>
        <member name="E:RoboSharp.Results.Statistic.OnFailedChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Results.Statistic.Failed"/> Property is updated. </summary>
        </member>
        <member name="E:RoboSharp.Results.Statistic.OnExtrasChanged">
            <summary> Occurs when the <see cref="P:RoboSharp.Results.Statistic.Extras"/> Property is updated. </summary>
        </member>
        <member name="P:RoboSharp.Results.Statistic.NonZeroValue">
            <summary>
            Checks all values and determines if any of them are != 0.
            </summary>
        </member>
        <member name="P:RoboSharp.Results.Statistic.Name">
            <summary>
            Name of the Statistics Object
            </summary>
        </member>
        <member name="P:RoboSharp.Results.Statistic.Type">
            <summary>
            <inheritdoc cref="T:RoboSharp.Results.Statistic.StatType"/>
            </summary>
        </member>
        <member name="P:RoboSharp.Results.Statistic.Total">
            <inheritdoc cref="P:RoboSharp.Interfaces.IStatistic.Total"/>
        </member>
        <member name="P:RoboSharp.Results.Statistic.Copied">
            <inheritdoc cref="P:RoboSharp.Interfaces.IStatistic.Copied"/>
        </member>
        <member name="P:RoboSharp.Results.Statistic.Skipped">
            <inheritdoc cref="P:RoboSharp.Interfaces.IStatistic.Skipped"/>
        </member>
        <member name="P:RoboSharp.Results.Statistic.Mismatch">
            <inheritdoc cref="P:RoboSharp.Interfaces.IStatistic.Mismatch"/>
        </member>
        <member name="P:RoboSharp.Results.Statistic.Failed">
            <inheritdoc cref="P:RoboSharp.Interfaces.IStatistic.Failed"/>
        </member>
        <member name="P:RoboSharp.Results.Statistic.Extras">
            <inheritdoc cref="P:RoboSharp.Interfaces.IStatistic.Extras"/>
        </member>
        <member name="M:RoboSharp.Results.Statistic.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.ToString(System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Customize the returned string
            </summary>
            <param name="IncludeType">Include string representation of <see cref="P:RoboSharp.Results.Statistic.Type"/></param>
            <param name="IncludePrefix">Include "Total:" / "Copied:" / etc in the string to identify the values</param>
            <param name="Delimiter">Value Delimieter</param>
            <param name="DelimiterAfterType">
            Include the delimiter after the 'Type' - Only used if <paramref name="IncludeType"/> us also true. <br/>
            When <paramref name="IncludeType"/> is true, a space always exist after the type string. This would add delimiter instead of the space. 
            </param>
            <returns>
            TRUE, TRUE, "," --> $"{Type} Total: {Total}, Copied: {Copied}, Skipped: {Skipped}, Mismatch: {Mismatch}, Failed: {Failed}, Extras: {Extras}" <para/>
            FALSE, TRUE, "," --> $"Total: {Total}, Copied: {Copied}, Skipped: {Skipped}, Mismatch: {Mismatch}, Failed: {Failed}, Extras: {Extras}" <para/>
            FALSE, FALSE, "," --> $"{Total}, {Copied}, {Skipped}, {Mismatch}, {Failed}, {Extras}"
            </returns>
        </member>
        <member name="M:RoboSharp.Results.Statistic.ToString_Type">
            <summary> Get the <see cref="P:RoboSharp.Results.Statistic.Type"/> as a string </summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.ToString_Total(System.Boolean,System.Boolean)">
            <summary>Get the string describing the <see cref="P:RoboSharp.Results.Statistic.Total"/></summary>
            <returns></returns>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString(System.Boolean,System.Boolean,System.String,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Results.Statistic.ToString_Copied(System.Boolean,System.Boolean)">
            <summary>Get the string describing the <see cref="P:RoboSharp.Results.Statistic.Copied"/></summary>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Total(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Results.Statistic.ToString_Extras(System.Boolean,System.Boolean)">
            <summary>Get the string describing the <see cref="P:RoboSharp.Results.Statistic.Extras"/></summary>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Total(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Results.Statistic.ToString_Failed(System.Boolean,System.Boolean)">
            <summary>Get the string describing the <see cref="P:RoboSharp.Results.Statistic.Failed"/></summary>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Total(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Results.Statistic.ToString_Mismatch(System.Boolean,System.Boolean)">
            <summary>Get the string describing the <see cref="P:RoboSharp.Results.Statistic.Mismatch"/></summary>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Total(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Results.Statistic.ToString_Skipped(System.Boolean,System.Boolean)">
            <summary>Get the string describing the <see cref="P:RoboSharp.Results.Statistic.Skipped"/></summary>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.ToString_Total(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.Results.Statistic.Parse(RoboSharp.Results.Statistic.StatType,System.String)">
            <summary>
            Parse a string and for the tokens reported by RoboCopy
            </summary>
            <param name="type">Statistic Type to produce</param>
            <param name="line">LogLine produced by RoboCopy in Summary Section</param>
            <returns>New Statistic Object</returns>
        </member>
        <member name="M:RoboSharp.Results.Statistic.Reset(System.Boolean)">
            <summary>
            Set the values for this object to 0
            </summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.Reset">
            <summary>
            Reset all values to Zero ( 0 ) -- Used by <see cref="T:RoboSharp.Results.RoboCopyResultsList"/> for the properties
            </summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.PrepEventArgs(System.Int64,System.Int64,System.String)">
            <summary>
            Prep Event Args for SETTERS of the properties
            </summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.ConditionalPrepEventArgs(System.Boolean,System.Int64,System.Int64,System.String)">
            <summary>
            Prep event args for the ADD and RESET methods
            </summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.TriggerDeferredEvents(RoboSharp.Results.Statistic,RoboSharp.EventArgObjects.StatChangedEventArg,RoboSharp.EventArgObjects.StatChangedEventArg,RoboSharp.EventArgObjects.StatChangedEventArg,RoboSharp.EventArgObjects.StatChangedEventArg,RoboSharp.EventArgObjects.StatChangedEventArg,RoboSharp.EventArgObjects.StatChangedEventArg)">
            <summary>
            Raises the events that were deferred while item was object was still being calculated by ADD / RESET
            </summary>
        </member>
        <member name="M:RoboSharp.Results.Statistic.Add(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Add the supplied values to this Statistic object. <br/>
            Events are defered until all the fields have been added together.
            </summary>
            <param name="total"></param>
            <param name="copied"></param>
            <param name="extras"></param>
            <param name="failed"></param>
            <param name="mismatch"></param>
            <param name="skipped"></param>
        </member>
        <member name="M:RoboSharp.Results.Statistic.AddStatistic(RoboSharp.Interfaces.IStatistic)">
            <summary>
            Add the results of the supplied Statistics object to this Statistics object. <br/>
            Events are defered until all the fields have been added together.
            </summary>
            <param name="stat">Statistics Item to add</param>
        </member>
        <member name="M:RoboSharp.Results.Statistic.AddStatistic(RoboSharp.Interfaces.IStatistic,System.Boolean)">
            <param name="enablePropertyChangedEvent"><inheritdoc cref="F:RoboSharp.Results.Statistic.EnablePropertyChangeEvent" path="*"/></param>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.AddStatistic(RoboSharp.Interfaces.IStatistic)"/>
            <param name="stats"/>
        </member>
        <member name="M:RoboSharp.Results.Statistic.AddStatistic(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IStatistic})">
            <summary>
            Add the results of the supplied Statistics objects to this Statistics object.
            </summary>
            <param name="stats">Statistics Item to add</param>
        </member>
        <member name="M:RoboSharp.Results.Statistic.AddStatistic(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Adds <see cref="P:RoboSharp.EventArgObjects.StatChangedEventArg.Difference"/> to the appropriate property based on the 'PropertyChanged' value. <br/>
            Will only add the value if the <see cref="P:RoboSharp.EventArgObjects.StatChangedEventArg.StatType"/> == <see cref="P:RoboSharp.Results.Statistic.Type"/>.
            </summary>
            <param name="eventArgs">Arg provided by either <see cref="E:RoboSharp.Results.Statistic.PropertyChanged"/> or a Statistic's object's On*Changed events</param>
        </member>
        <member name="M:RoboSharp.Results.Statistic.AddStatistics(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IStatistic},RoboSharp.Results.Statistic.StatType)">
            <summary>
            Combine the results of the supplied statistics objects of the specified type.
            </summary>
            <param name="stats">Collection of <see cref="T:RoboSharp.Results.Statistic"/> objects</param>
            <param name="statType">Create a new Statistic object of this type.</param>
            <returns>New Statistics Object</returns>
        </member>
        <member name="M:RoboSharp.Results.Statistic.AverageStatistic(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IStatistic})">
            <summary>
            Combine the supplied <see cref="T:RoboSharp.Results.Statistic"/> objects, then get the average.
            </summary>
            <param name="stats">Array of Stats objects</param>
        </member>
        <member name="M:RoboSharp.Results.Statistic.AverageStatistics(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IStatistic},RoboSharp.Results.Statistic.StatType)">
            <returns>New Statistics Object</returns>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.AverageStatistic(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IStatistic})"/>
        </member>
        <member name="M:RoboSharp.Results.Statistic.Subtract(RoboSharp.Interfaces.IStatistic)">
            <summary>
            Subtract Method used by <see cref="T:RoboSharp.Results.RoboCopyResultsList"/> <br/>
            Events are deferred until all value changes have completed.
            </summary>
            <param name="stat">Statistics Item to subtract</param>
        </member>
        <member name="M:RoboSharp.Results.Statistic.Subtract(RoboSharp.Interfaces.IStatistic,System.Boolean)">
            <param name="enablePropertyChangedEvent"><inheritdoc cref="F:RoboSharp.Results.Statistic.EnablePropertyChangeEvent" path="*"/></param>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.Subtract(RoboSharp.Interfaces.IStatistic)"/>        
        </member>
        <member name="M:RoboSharp.Results.Statistic.Subtract(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IStatistic})">
            <summary>
            Subtract the results of the supplied Statistics objects to this Statistics object.
            </summary>
            <param name="stats">Statistics Item to subtract</param>
        </member>
        <member name="M:RoboSharp.Results.Statistic.Subtract(RoboSharp.Interfaces.IStatistic,RoboSharp.Interfaces.IStatistic)">
            <param name="MainStat">Statistics object to clone</param>
            <param name="stats"><inheritdoc cref="M:RoboSharp.Results.Statistic.Subtract(RoboSharp.Interfaces.IStatistic)"/></param>
            <returns>Clone of the <paramref name="MainStat"/> object with the <paramref name="stats"/> subtracted from it.</returns>
            <inheritdoc cref="M:RoboSharp.Results.Statistic.Subtract(RoboSharp.Interfaces.IStatistic)"/>       
        </member>
        <member name="M:RoboSharp.Results.Statistic.Clone">
            <inheritdoc cref="M:RoboSharp.Interfaces.IStatistic.Clone"/>
        </member>
        <member name="T:RoboSharp.RetryOptions">
            <summary>
            RoboCopy switches for how to react if a copy/move operation errors
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/RetryOptions"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.RetryOptions.#ctor">
            <summary>
            Create new RetryOptions with Default Settings
            </summary>
        </member>
        <member name="M:RoboSharp.RetryOptions.#ctor(RoboSharp.RetryOptions)">
            <summary>
            Clone a RetryOptions Object
            </summary>
            <param name="options">RetryOptions object to clone</param>
        </member>
        <member name="M:RoboSharp.RetryOptions.Clone">
            <inheritdoc cref="M:RoboSharp.RetryOptions.#ctor(RoboSharp.RetryOptions)"/>
        </member>
        <member name="P:RoboSharp.RetryOptions.RetryCount">
            <summary>
            Specifies the number of retries N on failed copies (default is 0).
            [/R:N]
            </summary>
        </member>
        <member name="P:RoboSharp.RetryOptions.RetryWaitTime">
            <summary>
            Specifies the wait time N in seconds between retries (default is 30).
            [/W:N]
            </summary>
        </member>
        <member name="P:RoboSharp.RetryOptions.SaveToRegistry">
            <summary>
            Saves RetryCount and RetryWaitTime in the Registry as default settings.
            [/REG]
            </summary>
        </member>
        <member name="P:RoboSharp.RetryOptions.WaitForSharenames">
            <summary>
            Wait for sharenames to be defined.
            [/TBD]
            </summary>
        </member>
        <member name="M:RoboSharp.RetryOptions.ToString">
            <summary>
            Returns the Parsed Options as it would be applied to RoboCopy
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.RetryOptions.Merge(RoboSharp.RetryOptions)">
            <summary>
            Combine this object with another RetryOptions object. <br/>
            Any properties marked as true take priority. IEnumerable items are combined. <br/>
            String Values will only be replaced if the primary object has a null/empty value for that property.
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:RoboSharp.RoboCommand">
            <summary>
            Wrapper for the RoboCopy process
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/RoboCommand"/>
            </remarks>
        </member>
        <member name="P:RoboSharp.RoboCommand.Factory">
            <summary>
            The base <see cref="T:RoboSharp.RoboCommandFactory"/> object provided by the RoboSharp library.
            </summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.#ctor">
            <summary>Create a new RoboCommand object</summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.#ctor(System.String,System.String,RoboSharp.CopyActionFlags,RoboSharp.SelectionFlags,RoboSharp.LoggingFlags)">
            <summary>
            Create a new RoboCommand object with the provided settings.
            </summary>
            <inheritdoc cref="M:RoboSharp.RoboCommand.Init(System.String,System.Boolean,System.String,System.String)"/>
            <inheritdoc cref="M:RoboSharp.CopyOptions.ApplyActionFlags(RoboSharp.CopyActionFlags)"/>
            <inheritdoc cref="M:RoboSharp.SelectionOptions.ApplySelectionFlags(RoboSharp.SelectionFlags)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.#ctor(System.String,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.RoboCommand.Init(System.String,System.Boolean,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.#ctor(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.RoboCommand.Init(System.String,System.Boolean,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.#ctor(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.RoboCommand.Init(System.String,System.Boolean,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.#ctor(System.String,System.String,System.String,System.Boolean,RoboSharp.RoboSharpConfiguration,RoboSharp.CopyOptions,RoboSharp.SelectionOptions,RoboSharp.RetryOptions,RoboSharp.LoggingOptions,RoboSharp.JobOptions)">
            <remarks> Each of the Options objects can be specified within this constructor. If left = null, a new object will be generated using the default options for that object. </remarks>
            <inheritdoc cref="M:RoboSharp.RoboCommand.Init(System.String,System.Boolean,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.#ctor(RoboSharp.Interfaces.IRoboCommand,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a new RoboCommand with identical options at this RoboCommand
            </summary>
            <remarks>
            If Desired, the new RoboCommand object will share some of the same Property objects as the input <paramref name="command"/>. 
            For Example, that means that if a SelectionOption property changes, it will affect both RoboCommand objects since the  <see cref="P:RoboSharp.RoboCommand.SelectionOptions"/> property is shared between them. <br/>
            If the Link* options are set to FALSE (default), then it will create new property objects whose settings match the current settings of <paramref name="command"/>.
            <para/> Properties that can be linked: <br/>
            <see cref="P:RoboSharp.RoboCommand.Configuration"/> ( Linked by default ) <br/>
            <see cref="P:RoboSharp.RoboCommand.RetryOptions"/> ( Linked by default )<br/>
            <see cref="P:RoboSharp.RoboCommand.SelectionOptions"/><br/>
            <see cref="P:RoboSharp.RoboCommand.LoggingOptions"/><br/>
            <see cref="P:RoboSharp.RoboCommand.JobOptions"/><br/>
            </remarks>
            <param name="command">RoboCommand to Clone</param>
            <param name="NewSource">Specify a new source if desired. If left as null, will use Source from <paramref name="command"/></param>
            <param name="NewDestination">Specify a new source if desired. If left as null, will use Destination from <paramref name="command"/></param>
            <param name="LinkConfiguration">Link the <see cref="P:RoboSharp.RoboCommand.Configuration"/> of the two commands ( True Default )</param>
            <param name="LinkLoggingOptions">Link the <see cref="P:RoboSharp.RoboCommand.LoggingOptions"/> of the two commands</param>
            <param name="LinkRetryOptions">Link the <see cref="P:RoboSharp.RoboCommand.RetryOptions"/> of the two commands ( True Default )</param>
            <param name="LinkSelectionOptions">Link the <see cref="P:RoboSharp.RoboCommand.SelectionOptions"/> of the two commands</param>
            <param name="LinkJobOptions">Link the <see cref="P:RoboSharp.RoboCommand.SelectionOptions"/> of the two commands</param>
        </member>
        <member name="M:RoboSharp.RoboCommand.Init(System.String,System.Boolean,System.String,System.String)">
            <summary>Create a new RoboCommand object</summary>
            <param name="name"><inheritdoc cref="P:RoboSharp.RoboCommand.Name" path="*"/></param>
            <param name="stopIfDisposing"><inheritdoc cref="P:RoboSharp.RoboCommand.StopIfDisposing" path="*"/></param>
            <param name="source"><inheritdoc cref="P:RoboSharp.CopyOptions.Source" path="*"/></param>
            <param name="destination"><inheritdoc cref="P:RoboSharp.CopyOptions.Destination" path="*"/></param>
        </member>
        <member name="M:RoboSharp.RoboCommand.Clone(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:RoboSharp.RoboCommand.#ctor(RoboSharp.Interfaces.IRoboCommand,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="F:RoboSharp.RoboCommand.results">
            <summary>
            The last set of results that were created
            </summary>
        </member>
        <member name="F:RoboSharp.RoboCommand.LastDataReceived">
            <summary> 
            Stores the LastData processed by <see cref="M:RoboSharp.RoboCommand.Process_OutputDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)"/> 
            </summary>
        </member>
        <member name="P:RoboSharp.RoboCommand.Name">
            <summary> ID Tag for the job - Allows consumers to find/sort/remove/etc commands within a list via string comparison</summary>
        </member>
        <member name="P:RoboSharp.RoboCommand.IsPaused">
            <summary> Value indicating if process is currently paused </summary>
        </member>
        <member name="P:RoboSharp.RoboCommand.IsRunning">
            <summary> Value indicating if process is currently running </summary>
        </member>
        <member name="P:RoboSharp.RoboCommand.IsCancelled">
            <summary> Value indicating if process was Cancelled </summary>
        </member>
        <member name="P:RoboSharp.RoboCommand.IsScheduled">
            <summary> TRUE if <see cref="P:RoboSharp.CopyOptions.RunHours"/> is set up (Copy Operation is scheduled to only operate within specified timeframe). Otherwise False. </summary>
        </member>
        <member name="P:RoboSharp.RoboCommand.CommandOptions">
            <summary> Get the parameters string passed to RoboCopy based on the current setup </summary>
        </member>
        <member name="P:RoboSharp.RoboCommand.CopyOptions">
            <inheritdoc cref="T:RoboSharp.CopyOptions"/>
        </member>
        <member name="P:RoboSharp.RoboCommand.SelectionOptions">
            <inheritdoc cref="T:RoboSharp.SelectionOptions"/>
        </member>
        <member name="P:RoboSharp.RoboCommand.RetryOptions">
            <inheritdoc cref="T:RoboSharp.RetryOptions"/>
        </member>
        <member name="P:RoboSharp.RoboCommand.LoggingOptions">
            <inheritdoc cref="T:RoboSharp.LoggingOptions"/>
        </member>
        <member name="P:RoboSharp.RoboCommand.JobOptions">
            <inheritdoc cref="T:RoboSharp.JobOptions"/>
        </member>
        <member name="P:RoboSharp.RoboCommand.Configuration">
            <inheritdoc cref="T:RoboSharp.RoboSharpConfiguration"/>
        </member>
        <member name="P:RoboSharp.RoboCommand.ProgressEstimator">
            <inheritdoc cref="T:RoboSharp.Results.ProgressEstimator"/>
            <remarks>
            A new <see cref="T:RoboSharp.Results.ProgressEstimator"/> object is created every time the <see cref="M:RoboSharp.RoboCommand.Start(System.String,System.String,System.String)"/> method is called, but will not be created until called for the first time. 
            </remarks>
        </member>
        <member name="P:RoboSharp.RoboCommand.IProgressEstimator">
            <inheritdoc cref="P:RoboSharp.RoboCommand.ProgressEstimator"/>
        </member>
        <member name="P:RoboSharp.RoboCommand.StopIfDisposing">
            <summary>
            Value indicating if the process should be killed when the <see cref="M:RoboSharp.RoboCommand.Dispose"/> method is called.<br/>
            For example, if the RoboCopy process should exit when the program exits, this should be set to TRUE (default).
            </summary>
        </member>
        <member name="T:RoboSharp.RoboCommand.FileProcessedHandler">
            <summary>Handles <see cref="E:RoboSharp.RoboCommand.OnFileProcessed"/></summary>
        </member>
        <member name="E:RoboSharp.RoboCommand.OnFileProcessed">
            <summary>Occurs each time a new item has started processing</summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.RaiseOnFileProcessed(RoboSharp.FileProcessedEventArgs)">
            <summary> Raises the OnFileProcessed event </summary>
        </member>
        <member name="T:RoboSharp.RoboCommand.CommandErrorHandler">
            <summary>Handles <see cref="E:RoboSharp.RoboCommand.OnCommandError"/></summary>
        </member>
        <member name="E:RoboSharp.RoboCommand.OnCommandError">
            <summary>Occurs when an error occurs while generating the command that prevents the RoboCopy process from starting.</summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.RaiseOnCommandError(RoboSharp.CommandErrorEventArgs)">
            <summary> Raises the OnError event </summary>
        </member>
        <member name="T:RoboSharp.RoboCommand.ErrorHandler">
            <summary>Handles <see cref="E:RoboSharp.RoboCommand.OnError"/></summary>
        </member>
        <member name="E:RoboSharp.RoboCommand.OnError">
            <summary>Occurs an error is detected by RoboCopy </summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.RaiseOnError(RoboSharp.ErrorEventArgs)">
            <summary> Raises the OnError event </summary>
        </member>
        <member name="T:RoboSharp.RoboCommand.CommandCompletedHandler">
            <summary>Handles <see cref="E:RoboSharp.RoboCommand.OnCommandCompleted"/></summary>
        </member>
        <member name="E:RoboSharp.RoboCommand.OnCommandCompleted">
            <summary>Occurs when the RoboCopy process has finished executing and results are available.</summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.RaiseCommandCompleted(RoboSharp.RoboCommandCompletedEventArgs)">
            <summary> Raises the OnCommandCompleted event </summary>
        </member>
        <member name="T:RoboSharp.RoboCommand.CopyProgressHandler">
            <summary>Handles <see cref="E:RoboSharp.RoboCommand.OnCopyProgressChanged"/></summary>
        </member>
        <member name="E:RoboSharp.RoboCommand.OnCopyProgressChanged">
            <summary>Occurs each time the current item's progress is updated</summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.RaiseCopyProgressChanged(RoboSharp.CopyProgressEventArgs)">
            <summary> Raises the OnCopyProgressChanged event </summary>
        </member>
        <member name="T:RoboSharp.RoboCommand.ProgressUpdaterCreatedHandler">
            <summary>Handles <see cref="E:RoboSharp.RoboCommand.OnProgressEstimatorCreated"/></summary>
        </member>
        <member name="E:RoboSharp.RoboCommand.OnProgressEstimatorCreated">
            <summary>
            Occurs when a <see cref="T:RoboSharp.Results.ProgressEstimator"/> is created during <see cref="M:RoboSharp.RoboCommand.Start(System.String,System.String,System.String)"/>, allowing binding to occur within the event subscriber. <br/>
            This event will occur once per Start.
            </summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.RaiseProgressEstimatorCreated(RoboSharp.EventArgObjects.ProgressEstimatorCreatedEventArgs)">
            <summary> Raises the OnProgressEstimatorCreated event </summary>
        </member>
        <member name="E:RoboSharp.RoboCommand.TaskFaulted">
            <summary>
            Occurs if the RoboCommand task is stopped due to an unhandled exception. Occurs instead of <see cref="E:RoboSharp.RoboCommand.OnCommandCompleted"/>
            </summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.RaiseTaskFaulted(System.UnhandledExceptionEventArgs)">
            <summary> Raises the OnProgressEstimatorCreated event </summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.Pause">
            <summary>Pause execution of the RoboCopy process when <see cref="P:RoboSharp.RoboCommand.IsPaused"/> == false</summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.Resume">
            <summary>Resume execution of the RoboCopy process when <see cref="P:RoboSharp.RoboCommand.IsPaused"/> == true</summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.Stop">
            <summary> Immediately Kill the RoboCopy process</summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.StartAsync(System.String,System.String,System.String)">
            <summary>
            awaits <see cref="M:RoboSharp.RoboCommand.Start(System.String,System.String,System.String)"/> then returns the results.
            </summary>
            <returns>Returns the RoboCopy results once RoboCopy has finished executing.</returns>        
            <inheritdoc cref="M:RoboSharp.RoboCommand.Start(System.String,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.StartAsync_ListOnly(System.String,System.String,System.String)">
            <summary>awaits <see cref="M:RoboSharp.RoboCommand.Start_ListOnly(System.String,System.String,System.String)"/> then returns the results.</summary>
            <returns>Returns the List-Only results once RoboCopy has finished executing.</returns>
            <inheritdoc cref="M:RoboSharp.RoboCommand.Start_ListOnly(System.String,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.Start_ListOnly(System.String,System.String,System.String)">
            <summary>
            Run the currently selected options in ListOnly mode by setting <see cref="P:RoboSharp.LoggingOptions.ListOnly"/> = TRUE
            </summary>
            <returns>Task that awaits <see cref="M:RoboSharp.RoboCommand.Start(System.String,System.String,System.String)"/>, then resets the ListOnly option to original value.</returns>
            <inheritdoc cref="M:RoboSharp.RoboCommand.Start(System.String,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.Start(System.String,System.String,System.String)">
            <summary>
            Start the RoboCopy Process. 
            </summary>
            <remarks>
            If overridden by a derived class, the override affects all Start* methods within RoboCommand. Base.Start() must be called to start the robocopy process.
            </remarks>
            <returns>Returns a task that reports when the RoboCopy process has finished executing.</returns>
            <exception cref="T:System.InvalidOperationException"/>
            <inheritdoc cref="M:RoboSharp.Authentication.AuthenticateSourceAndDestination(RoboSharp.Interfaces.IRoboCommand,System.String,System.String,System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.GetRoboCopyTask(RoboSharp.Results.ResultsBuilder,System.String,System.String,System.String)">
            <summary>
            Start the RoboCopy process and the watcher task
            </summary>
            <returns>The continuation task that cleans up after the task that watches RoboCopy has finished executing.</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.SaveAsJobFile(System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Save this RoboCommand's options to a new RoboCopyJob ( *.RCJ ) file. <br/>
            Note: This will not save the path submitted into <see cref="P:RoboSharp.JobOptions.FilePath"/>.
            </summary>
            <remarks>
            Job Files don't care if the Source/Destination are invalid, since they just save the command values to a file.
            </remarks>
            <param name="path"><inheritdoc cref="P:RoboSharp.JobOptions.FilePath"/></param>
            <param name="IncludeSource">Save <see cref="P:RoboSharp.CopyOptions.Source"/> into the RCJ file.</param>
            <param name="IncludeDestination">Save <see cref="P:RoboSharp.CopyOptions.Destination"/> into the RCJ file.</param>
            <inheritdoc cref = "M:RoboSharp.RoboCommand.Start(System.String,System.String,System.String)" />
            <param name="domain"/><param name="password"/><param name="username"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.LoadFromJobFile(System.String)">
            <inheritdoc cref="M:RoboSharp.JobFileBuilder.Parse(System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.TryLoadFromJobFile(System.String,RoboSharp.RoboCommand@)">
            <inheritdoc cref="M:RoboSharp.JobFileBuilder.Parse(System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.Process_ErrorDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary> Occurs when the Process reports an error prior to starting the robocopy process, not an 'error' from Robocopy </summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.Process_OutputDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary> React to Process.StandardOutput </summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.GetResults">
            <inheritdoc cref="T:RoboSharp.Results.RoboCopyResults"/>
            <returns>The RoboCopyResults object from the last run</returns>
        </member>
        <member name="M:RoboSharp.RoboCommand.ResetResults">
            <summary>
            Set the results to null - This is to prevent adding results from a previous run being added to the results list by RoboQueue
            </summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.GenerateParameters">
            <summary>
            Generate the Parameters and Switches to execute RoboCopy with based on the configured settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.RoboCommand.ToString">
            <inheritdoc cref="M:RoboSharp.RoboCommand.GenerateParameters"/>
        </member>
        <member name="M:RoboSharp.RoboCommand.MergeJobFile(RoboSharp.JobFile)">
            <summary>
            Combine this object's options with that of some JobFile
            </summary>
            <param name="jobFile"></param>
        </member>
        <member name="M:RoboSharp.RoboCommand.Dispose">
            <summary>Dispose of this object. Kills RoboCopy process if <see cref="P:RoboSharp.RoboCommand.StopIfDisposing"/> == true &amp;&amp; <see cref="P:RoboSharp.RoboCommand.IsScheduled"/> == false. </summary>
            <remarks><inheritdoc cref="M:System.IDisposable.Dispose" path="/summary"/></remarks>
        </member>
        <member name="M:RoboSharp.RoboCommand.Finalize">
            <summary>  Finalizer -> Cleans up the process hooks during finalization </summary>
        </member>
        <member name="M:RoboSharp.RoboCommand.Dispose(System.Boolean)">
            <summary>IDisposable Implementation</summary>
        </member>
        <member name="T:RoboSharp.RoboCommandFactory">
            <summary>
            Object that provides methods to generate new <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> objects.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboCommandFactory.DefaultCopyOptions">
            <summary>
            The Default <see cref="T:RoboSharp.CopyActionFlags"/> to apply when generating an <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> using this factory.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboCommandFactory.DefaultLoggingOptions">
            <summary>
            The Default <see cref="T:RoboSharp.LoggingFlags"/> to apply when generating an <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> using this factory.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboCommandFactory.DefaultSelectionOptions">
            <summary>
            The Default <see cref="T:RoboSharp.SelectionFlags"/> to apply when generating an <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> using this factory.
            </summary>
        </member>
        <member name="M:RoboSharp.RoboCommandFactory.GetRoboCommand">
            <summary>
            Create a new <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object using default settings.
            </summary>
            <remarks>
            This method is used by the other methods within the <see cref="T:RoboSharp.RoboCommandFactory"/> to generate the inital <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object that will be returned. 
            <br/>All settings are then applied to the object's options components (such as the source/destination parameters)
            <br/>As such, overriding this one method will to provide will provide the other factory methods with the customized default IRobocommand object.
            </remarks>
            <returns>new <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object using the parameterless constructor</returns>
        </member>
        <member name="M:RoboSharp.RoboCommandFactory.GetRoboCommand(System.String,System.String)">
            <summary>
            Create a new <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object with the specified <paramref name="source"/> and <paramref name="destination"/>.
            </summary>
            <remarks/>
            <param name="source"><inheritdoc cref="P:RoboSharp.CopyOptions.Source" path="*"/></param>
            <param name="destination"><inheritdoc cref="P:RoboSharp.CopyOptions.Destination" path="*"/></param>
            <returns>new <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object with the specified <paramref name="source"/> and <paramref name="destination"/>.</returns>
            <inheritdoc cref="M:RoboSharp.RoboCommandFactory.GetRoboCommand"/>
        </member>
        <member name="M:RoboSharp.RoboCommandFactory.GetRoboCommand(System.String,System.String,RoboSharp.CopyActionFlags,RoboSharp.SelectionFlags)">
            <summary>
            Create a new <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object with the specified options
            </summary>
            <remarks/>
            <param name="copyActionFlags">The options to apply to the generated <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object </param>
            <param name="selectionFlags">The options to apply to the generated <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object </param>
            <inheritdoc cref="M:RoboSharp.RoboCommandFactory.GetRoboCommand(System.String,System.String)"/>]
            <param name="destination"/><param name="source"/>
        </member>
        <member name="M:RoboSharp.RoboCommandFactory.GetRoboCommand(System.String,System.String,RoboSharp.CopyActionFlags)">
            <inheritdoc cref="M:RoboSharp.RoboCommandFactory.GetRoboCommand(System.String,System.String,RoboSharp.CopyActionFlags,RoboSharp.SelectionFlags)"/>
        </member>
        <member name="T:RoboSharp.RoboCommandXmlSerializer">
            <summary>
            Serialize an IEnumerable&lt;IRoboCommand&gt; into/out of XML
            </summary>
        </member>
        <member name="T:RoboSharp.RoboCommandXmlSerializer.CreateIRoboCommandFunc">
            <summary>
            Function used to create an <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> object from the deserialized parameters
            </summary>
            <param name="name"><inheritdoc cref="P:RoboSharp.Interfaces.IRoboCommand.Name"/></param>
            <param name="copyOptions">The CopyOptions deserialized from the XML file</param>
            <param name="loggingOptions">The LoggingOptions deserialized from the XML file</param>
            <param name="retryOptions">The RetryOptions deserialized from the XML file</param>
            <param name="selectionOptions">The SelectionOptions deserialized from the XML file</param>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.DefaultCreationDelegate(System.String,RoboSharp.CopyOptions,RoboSharp.LoggingOptions,RoboSharp.RetryOptions,RoboSharp.SelectionOptions)">
            <inheritdoc cref="T:RoboSharp.RoboCommandXmlSerializer.CreateIRoboCommandFunc"/>
            <remarks>This is the default <see cref="T:RoboSharp.RoboCommandXmlSerializer.CreateIRoboCommandFunc"/> used by the <see cref="T:RoboSharp.RoboCommandXmlSerializer"/></remarks>
        </member>
        <member name="F:RoboSharp.RoboCommandXmlSerializer.Item">
            <summary>Name of nodes contained within IEnumerable nodes</summary>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.#ctor">
            <summary>
            Create a new RoboCommandXmlSerializer that serializes / deserializes <see cref="T:RoboSharp.RoboCommand"/> objects
            </summary>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.#ctor(RoboSharp.RoboCommandXmlSerializer.CreateIRoboCommandFunc)">
            <summary>
            Create a new RoboCommandXmlSerializer that uses the provided <paramref name="createIRoboCommandFunc"/> 
            to create the IRoboCommand objects during deserialization.
            </summary>
            <param name="createIRoboCommandFunc">A <see cref="T:RoboSharp.RoboCommandXmlSerializer.CreateIRoboCommandFunc"/> used to create the IRoboCommands during deserialization</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.CreateIRoboCommand(System.String,RoboSharp.CopyOptions,RoboSharp.LoggingOptions,RoboSharp.RetryOptions,RoboSharp.SelectionOptions)">
            <inheritdoc cref="T:RoboSharp.RoboCommandXmlSerializer.CreateIRoboCommandFunc"/>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.CreateXmlWriter(System.String)">
            <summary>
            Create a new XmlWriter object to write the xml document to the specified <paramref name="path"/>
            </summary>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.Deserialize(System.String)">
            <inheritdoc/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <inheritdoc cref="M:RoboSharp.RoboCommandXmlSerializer.DeserializeCommands(System.Xml.Linq.XElement)"/>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.DeserializeCommands(System.Xml.Linq.XElement)">
            <summary>
            Scan the <paramref name="parent"/> node for children elements named 'IRoboCommand' and parse each one into a new <see cref="T:RoboSharp.RoboCommand"/> object.
            </summary>
            <param name="parent">The parent node which contains Elements named 'IRoboCommand'</param>
            <returns>A collection of <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> objects that were deserialized.</returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.DeserializeCommand(System.Xml.Linq.XElement)">
            <summary>
            Evaluate the <paramref name="IRoboCommandNode"/>'s children, and deserialize it into a new <see cref="T:RoboSharp.Interfaces.IRoboCommand"/>
            </summary>
            <param name="IRoboCommandNode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.DeserializeCopyOptions(System.Xml.Linq.XElement)">
            <param name="optionsElement">The element representing the CopyOptions object</param>
            <returns>The deserialized CopyOptions object</returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.DeserializeLoggingOptions(System.Xml.Linq.XElement)">
            <param name="optionsElement">The element representing the LoggingOptions object</param>
            <returns>The deserialized LoggingOptions object</returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.DeserializeRetryOptions(System.Xml.Linq.XElement)">
            <param name="optionsElement">The element representing the RetryOptions object</param>
            <returns>The deserialized RetryOptions object</returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.DeserializeSelectionOptions(System.Xml.Linq.XElement)">
            <param name="optionsElement">The element representing the SelectionOptions object</param>
            <returns>The deserialized SelectionOptions object</returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.DeserializeNode``1(System.Xml.Linq.XElement,``0)">
            <summary>
            Apply properties from the supplied <paramref name="xElement"/> to the <paramref name="optionsObject"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xElement">The parent node, whose children represent the properties of the created object.</param>
            <param name="optionsObject">The object to apply the values to</param>
            <returns>An <typeparamref name="T"/> object that has the settings provided by the <paramref name="xElement"/></returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.String)">
            <inheritdoc/>
            <remarks>Note: This overwrites the xml file at the specified <paramref name="path"/></remarks>
            <inheritdoc cref="M:System.Xml.XmlWriter.Create(System.String)"/>
            <inheritdoc cref="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)"/>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.Serialize(System.String,RoboSharp.Interfaces.IRoboCommand[])">
            <inheritdoc cref="M:RoboSharp.RoboCommandXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.String)"/>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.SerializeRoboCommand(RoboSharp.Interfaces.IRoboCommand)">
            <summary>
            Serialize an IRoboCommand into an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="command">The command to serialize</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> tree representing the serialized <paramref name="command"/></returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.SerializeCopyOptions(RoboSharp.CopyOptions)">
            <summary> Serialize the <paramref name="copyOptions"/> object into an <see cref="T:System.Xml.Linq.XElement"/> </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the object, or null if no Xelement was produced.</returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.SerializeLoggingOptions(RoboSharp.LoggingOptions)">
            <summary> Serialize the <paramref name="loggingOptions"/> object into an <see cref="T:System.Xml.Linq.XElement"/> </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the object, or null if no Xelement was produced.</returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.SerializeRetryOptions(RoboSharp.RetryOptions)">
            <summary> Serialize the <paramref name="retryOptions"/> object into an <see cref="T:System.Xml.Linq.XElement"/> </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the object, or null if no Xelement was produced.</returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.SerializeSelectionOptions(RoboSharp.SelectionOptions)">
            <summary> Serialize the <paramref name="selectionOptions"/> object into an <see cref="T:System.Xml.Linq.XElement"/> </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the object, or null if no Xelement was produced.</returns>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.CreatePropertyNodes(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Read all boolean, integer, and string properties of the specified object, and create <see cref="T:System.Xml.Linq.XElement"/> nodes to represent them.
            </summary>
            <param name="optionsObject">The object to evaluate</param>
            <param name="createNodeWhenFalse">when set false, boolean properties will only be written when their value is true. When set true, always create the node.</param>
            <param name="createNodeWhenEmpty">when set false, string properties will only be written when their value is not empty. When set true, always create the node.</param>
        </member>
        <member name="M:RoboSharp.RoboCommandXmlSerializer.TryGetDefaultValue``1(System.Reflection.PropertyInfo,``0@)">
            <summary>
            Try to get the Default Value, as assigned by a <see cref="T:System.ComponentModel.DefaultValueAttribute"/>, from the <paramref name="prop"/>
            </summary>
            <returns>TRUE if a default value attribute was located, otherwise FALSE</returns>
        </member>
        <member name="T:RoboSharp.RoboQueue">
            <summary>
            Contains a private List{IRoboCommand} object with controlled methods for access to it.  <br/>
            Attempting to modify the list while <see cref="P:RoboSharp.RoboQueue.IsRunning"/> = true results in <see cref="T:RoboSharp.RoboQueue.ListAccessDeniedException"/> being thrown.
            <para/>Implements the following: <br/>
            <see cref="T:RoboSharp.Interfaces.IRoboQueue"/> <br/>
            <see cref="T:System.Collections.IEnumerable"/> -- Allow enumerating through the collection that is stored in a private list -- Also see <see cref="P:RoboSharp.RoboQueue.Commands"/> <br/>
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> -- Allow subscription to collection changes against the list <see cref="T:RoboSharp.ObservableList`1"/> <br/>
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> -- Most properties will trigger <see cref="E:RoboSharp.RoboQueue.PropertyChanged"/> events when updated.<br/>
            <see cref="T:System.IDisposable"/> -- Allow disposal of all <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> objects in the list.
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/RoboQueue"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.RoboQueue.#ctor">
            <summary>
            Initialize a new (empty) <see cref="T:RoboSharp.RoboQueue"/> object.
            </summary>
        </member>
        <member name="M:RoboSharp.RoboQueue.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a new (empty) <see cref="T:RoboSharp.RoboQueue"/> object with a specificed Name.
            </summary>
            <inheritdoc cref="M:RoboSharp.RoboQueue.#ctor(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.String,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.#ctor(RoboSharp.Interfaces.IRoboCommand,System.String,System.Int32)">
            <summary>
            Initialize a new <see cref="T:RoboSharp.RoboQueue"/> object that contains the supplied <see cref="T:RoboSharp.Interfaces.IRoboCommand"/>.
            </summary>
            <inheritdoc cref="M:RoboSharp.RoboQueue.#ctor(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.String,System.Int32)"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.#ctor(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand},System.String,System.Int32)">
            <summary>
            Initialize a new <see cref="T:RoboSharp.RoboQueue"/> object that contains the supplied <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> collection.
            </summary>
            <param name="roboCommand">IRoboCommand(s) to populate the list with.</param>
            <param name="name"><inheritdoc cref="P:RoboSharp.RoboQueue.Name"/></param>
            <param name="maxConcurrentJobs"><inheritdoc cref="P:RoboSharp.RoboQueue.MaxConcurrentJobs"/></param>
        </member>
        <member name="M:RoboSharp.RoboQueue.#ctor(RoboSharp.Interfaces.IRoboCommand[])">
            <summary>
            Initialize a new <see cref="T:RoboSharp.RoboQueue"/> object that contains the supplied <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> collection.
            </summary>
            <param name="roboCommands">IRoboCommand(s) to populate the list with.</param>
        </member>
        <member name="P:RoboSharp.RoboQueue.AnyRunning">
            <summary> 
            Checks <see cref="P:RoboSharp.Interfaces.IRoboCommand.IsRunning"/> property of all items in the list. 
            <br/> INotifyPropertyChanged is not raised when this property changes.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.AnyPaused">
            <summary> 
            Checks <see cref="P:RoboSharp.Interfaces.IRoboCommand.IsPaused"/> property of all items in the list. 
            <br/> INotifyPropertyChanged is not raised when this property changes.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.AnyCancelled">
            <summary> 
            Checks <see cref="P:RoboSharp.Interfaces.IRoboCommand.IsCancelled"/> property of all items in the list. 
            <br/> INotifyPropertyChanged is not raised when this property changes.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.JobsCurrentlyRunning">
            <summary> 
            Check the list and get the count of RoboCommands that are either in the 'Run' or 'Paused' state. <br/>
            (Paused state is included since these can be resumed at any time) 
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.ListCount">
            <summary> Number of RoboCommands in the list </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.Name">
            <summary>
            Name of this collection of RoboCommands
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.Commands">
            <summary>
            Wraps the private <see cref="T:RoboSharp.ObservableList`1"/> into a ReadOnlyCollection for public consumption and data binding.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.ProgressEstimator">
            <summary>
            <inheritdoc cref="P:RoboSharp.RoboCommand.ProgressEstimator"/> <para/>
            This object will produce the sum of all the ProgressEstimator objects generated by the commands within the list.
            <para/> After the first request, the values will be updated every 250ms while the Queue is still running.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.IsRunning">
            <summary> 
            Indicates if a task is currently running or paused. <br/>
            When true, prevents starting new tasks and prevents modication of the list.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.IsPaused">
            <summary>
            This is set true when <see cref="M:RoboSharp.RoboQueue.PauseAll"/> is called while any of the items in the list were running, and set false when <see cref="M:RoboSharp.RoboQueue.ResumeAll"/> or <see cref="M:RoboSharp.RoboQueue.StopAll"/> is called.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.WasCancelled">
            <summary>
            Flag is set to TRUE if the 'Stop' command is issued. Reset to False when starting a new operation.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.IsCopyOperationRunning">
            <summary> Indicates if the StartAll task is currently running. </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.IsListOnlyRunning">
            <summary> Indicates if the StartAll_ListOnly task is currently running. </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.ListOnlyCompleted">
            <summary> Indicates if the StartAll_ListOnly() operation has been completed. </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.CopyOperationCompleted">
            <summary> Indicates if the StartAll() operation has been completed. </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.MaxConcurrentJobs">
            <summary>
            Specify the max number of RoboCommands to execute at the same time. <br/>
            Set Value to 0 to allow infinite number of jobs (Will issue all start commands at same time) <br/>
            Default Value = 1; <br/>
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.JobsComplete">
            <summary>
            Report how many <see cref="M:RoboSharp.Interfaces.IRoboCommand.Start(System.String,System.String,System.String)"/> tasks has completed during the run. <br/>
            This value is reset to 0 when a new run starts, and increments as each job exits.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.JobsCompletedSuccessfully">
            <summary>
            Report how many <see cref="M:RoboSharp.Interfaces.IRoboCommand.Start(System.String,System.String,System.String)"/> tasks has completed successfully during the run. <br/>
            This value is reset to 0 when a new run starts, and increments as each job exits.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.JobsStarted">
            <summary>
            Report how many <see cref="M:RoboSharp.Interfaces.IRoboCommand.Start(System.String,System.String,System.String)"/> tasks have been started during the run. <br/>
            This value is reset to 0 when a new run starts, and increments as each job starts.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.ListResults">
            <summary>
            Contains the results from the most recent run started via <see cref="M:RoboSharp.RoboQueue.StartAll_ListOnly(System.String,System.String,System.String)"/> <para/>
            Any time StartALL_ListOnly is called, a new RoboQueueResults object will be created.  <br/>
            </summary>
        </member>
        <member name="P:RoboSharp.RoboQueue.RunResults">
            <summary>
            Contains the results from the most recent run started via <see cref="M:RoboSharp.RoboQueue.StartAll(System.String,System.String,System.String)"/> <para/>
            Any time StartALL is called, a new RoboQueueResults object will be created.  <br/>
            </summary>
        </member>
        <member name="E:RoboSharp.RoboQueue.OnFileProcessed">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnFileProcessed"/>
            <remarks>This bind to every IRoboCommand in the list.</remarks>
        </member>
        <member name="E:RoboSharp.RoboQueue.OnCommandError">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnCommandError"/>
            <remarks>This bind to every RoboCommand in the list.</remarks>
        </member>
        <member name="E:RoboSharp.RoboQueue.OnError">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnError"/>
            <remarks>This bind to every RoboCommand in the list.</remarks>
        </member>
        <member name="E:RoboSharp.RoboQueue.OnCommandCompleted">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnCommandCompleted"/>
            <remarks>This will occur for every RoboCommand in the list.</remarks>
        </member>
        <member name="E:RoboSharp.RoboQueue.OnCopyProgressChanged">
            <inheritdoc cref="E:RoboSharp.RoboCommand.OnCopyProgressChanged"/>
            <remarks>This bind to every RoboCommand in the list.</remarks>
        </member>
        <member name="E:RoboSharp.RoboQueue.ListResultsUpdated">
            <summary> Occurs when the <see cref="P:RoboSharp.RoboQueue.ListResults"/> gets updated </summary>
        </member>
        <member name="E:RoboSharp.RoboQueue.RunResultsUpdated">
            <summary> Occurs when the <see cref="P:RoboSharp.RoboQueue.RunResults"/> gets updated </summary>
        </member>
        <member name="T:RoboSharp.RoboQueue.ProgressUpdaterCreatedHandler">
            <summary>Handles <see cref="E:RoboSharp.RoboQueue.OnProgressEstimatorCreated"/></summary>
        </member>
        <member name="E:RoboSharp.RoboQueue.OnProgressEstimatorCreated">
            <summary>
            Occurs when a <see cref="T:RoboSharp.Results.ProgressEstimator"/> is created when starting a new task, allowing binding to occur within the event subscriber. <br/>
            This event will occur once per Start. See notes on <see cref="P:RoboSharp.RoboQueue.ProgressEstimator"/> for more details.
            </summary>
        </member>
        <member name="T:RoboSharp.RoboQueue.CommandStartedHandler">
            <summary>Handles <see cref="E:RoboSharp.RoboQueue.OnCommandStarted"/></summary>
        </member>
        <member name="E:RoboSharp.RoboQueue.OnCommandStarted">
            <summary>
            Occurs each time a Command has started succesfully
            </summary>
        </member>
        <member name="T:RoboSharp.RoboQueue.RunCompletedHandler">
            <summary>Handles <see cref="E:RoboSharp.RoboQueue.OnCommandCompleted"/></summary>
        </member>
        <member name="E:RoboSharp.RoboQueue.RunCompleted">
            <summary>
            Occurs after when the task started by the StartAll and StartAll_ListOnly methods has finished executing.
            </summary>
        </member>
        <member name="E:RoboSharp.RoboQueue.TaskFaulted">
            <summary>
            Occurs if the RoboQueue task is stopped due to an unhandled exception. Occurs instead of <see cref="E:RoboSharp.RoboQueue.RunCompleted"/>
            <br/> Also occurs if any of the RoboCommand objects raise <see cref="E:RoboSharp.RoboCommand.TaskFaulted"/>
            </summary>
        </member>
        <member name="M:RoboSharp.RoboQueue.GetListResults">
            <summary>
            Get the current instance of the <see cref="P:RoboSharp.RoboQueue.ListResults"/> object
            </summary>
            <returns>New instance of the <see cref="P:RoboSharp.RoboQueue.ListResults"/> list.</returns>
        </member>
        <member name="M:RoboSharp.RoboQueue.GetRunResults">
            <summary>
            Get the current of the <see cref="P:RoboSharp.RoboQueue.RunResults"/> object
            </summary>
            <returns>New instance of the <see cref="P:RoboSharp.RoboQueue.RunResults"/> list.</returns>
        </member>
        <member name="M:RoboSharp.RoboQueue.StopAll">
            <summary>
            Run <see cref="M:RoboSharp.RoboCommand.Stop"/> against all items in the list.
            </summary>
        </member>
        <member name="M:RoboSharp.RoboQueue.PauseAll">
            <summary>
            Loop through the items in the list and issue <see cref="M:RoboSharp.Interfaces.IRoboCommand.Pause"/> on any commands where <see cref="P:RoboSharp.Interfaces.IRoboCommand.IsRunning"/> is true.
            </summary>
        </member>
        <member name="M:RoboSharp.RoboQueue.ResumeAll">
            <summary>
            Loop through the items in the list and issue <see cref="M:RoboSharp.Interfaces.IRoboCommand.Resume"/> on any commands where <see cref="P:RoboSharp.Interfaces.IRoboCommand.IsPaused"/> is true.
            </summary>
        </member>
        <member name="M:RoboSharp.RoboQueue.StartAll_ListOnly(System.String,System.String,System.String)">
            <summary>
            Set all IRoboCommand objects to ListOnly mode, run them, then set all RoboCommands back to their previous ListOnly mode setting.
            </summary>
            <inheritdoc cref="M:RoboSharp.RoboQueue.StartJobs(System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.StartAll(System.String,System.String,System.String)">
            <inheritdoc cref="M:RoboSharp.RoboQueue.StartJobs(System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.StartJobs(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create Task that Starts all RoboCommands. 
            </summary>
            <remarks> <paramref name="domain"/>, <paramref name="password"/>, and <paramref name="username"/> are applied to all IRoboCommand objects during this run. </remarks>
            <returns> New Task that finishes after all RoboCommands have stopped executing </returns>
        </member>
        <member name="M:RoboSharp.RoboQueue.RaiseCommandCompleted(RoboSharp.Interfaces.IRoboCommand,RoboSharp.RoboCommandCompletedEventArgs,System.Boolean)">
            <summary>
            Intercept OnCommandCompleted from each IRoboCommand, react, then raise this object's OnCommandCompleted event
            </summary>
        </member>
        <member name="M:RoboSharp.RoboQueue.Finalize">
            <summary>
            Finalizer -> Ensures that all IRoboCommand objects get disposed of properly when program exits
            </summary>
        </member>
        <member name="M:RoboSharp.RoboQueue.Dispose">
            <summary>
            Dispose all IRoboCommand objects contained in the list. - This will kill any Commands that have <see cref="P:RoboSharp.RoboCommand.StopIfDisposing"/> = true (default) <br/>
            </summary>
        </member>
        <member name="E:RoboSharp.RoboQueue.PropertyChanged">
            <inheritdoc cref="T:System.ComponentModel.INotifyPropertyChanged"/>
        </member>
        <member name="E:RoboSharp.RoboQueue.CollectionChanged">
            <inheritdoc cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/>
        </member>
        <member name="P:RoboSharp.RoboQueue.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.IList.Item(System.Int32)"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.GetEnumerator">
            <summary>
            Gets the enumerator for the enumeating through this object's <see cref="T:RoboSharp.Interfaces.IRoboCommand"/> objects
            </summary>
        </member>
        <member name="T:RoboSharp.RoboQueue.ListAccessDeniedException">
            <summary>
            Exception thrown when attempting to run a method accesses the list backing a RoboQueue object while the tasks are in progress.
            </summary>
        </member>
        <member name="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg">
            <remarks>This functionality is disabled if <see cref="P:RoboSharp.RoboQueue.IsRunning"/> == true.</remarks>
            <exception cref="T:RoboSharp.RoboQueue.ListAccessDeniedException"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.AddCommand(RoboSharp.Interfaces.IRoboCommand)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Add(`0)"/>
            <inheritdoc cref="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.AddCommand(System.Int32,RoboSharp.Interfaces.IRoboCommand)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)"/>
            <inheritdoc cref="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.AddCommand(System.Collections.Generic.IEnumerable{RoboSharp.Interfaces.IRoboCommand})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
            <inheritdoc cref="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.AddCommand(RoboSharp.Interfaces.IRoboCommand[])">
            <inheritdoc cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
            <inheritdoc cref="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.RemoveCommand(RoboSharp.Interfaces.IRoboCommand)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Remove(`0)"/>
            <inheritdoc cref="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.RemoveCommand(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)"/>
            <inheritdoc cref="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.RemoveCommand(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)"/>
            <inheritdoc cref="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.RemoveCommand(System.Predicate{RoboSharp.Interfaces.IRoboCommand})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})"/>
            <inheritdoc cref="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.ClearCommandList">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Clear"/>
            <inheritdoc cref="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.ReplaceCommand(RoboSharp.Interfaces.IRoboCommand,System.Int32)">
            <summary>Performs <see cref="M:RoboSharp.RoboQueue.RemoveCommand(System.Int32)"/> then <see cref="M:RoboSharp.RoboQueue.AddCommand(System.Int32,RoboSharp.Interfaces.IRoboCommand)"/></summary>
        </member>
        <member name="M:RoboSharp.RoboQueue.Contains(RoboSharp.Interfaces.IRoboCommand)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Contains(`0)"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.ForEach(System.Action{RoboSharp.Interfaces.IRoboCommand})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})"/>
            <inheritdoc cref="F:RoboSharp.RoboQueue.ListAccessDeniedException.StandardMsg"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.FindAll(System.Predicate{RoboSharp.Interfaces.IRoboCommand})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.Find(System.Predicate{RoboSharp.Interfaces.IRoboCommand})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})"/>
        </member>
        <member name="M:RoboSharp.RoboQueue.IndexOf(RoboSharp.Interfaces.IRoboCommand)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0)"/>
        </member>
        <member name="T:RoboSharp.RoboSharpConfiguration">
            <summary>
            Setup the ErrorToken and the path to RoboCopy.exe.
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/RoboSharpConfiguration"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.RoboSharpConfiguration.#ctor">
            <summary>
            Create new LoggingOptions with Default Settings
            </summary>
        </member>
        <member name="M:RoboSharp.RoboSharpConfiguration.#ctor(RoboSharp.RoboSharpConfiguration)">
            <summary>
            Clone a RoboSharpConfiguration Object
            </summary>
            <param name="options">RoboSharpConfiguration object to clone</param>
        </member>
        <member name="M:RoboSharp.RoboSharpConfiguration.Clone">
            <inheritdoc cref="M:RoboSharp.RoboSharpConfiguration.#ctor(RoboSharp.RoboSharpConfiguration)"/>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.ErrorToken">
            <summary>
            Error Token Identifier -- EN = "ERROR", DE = "FEHLER", etc <br/>
            Leave as / Set to null to use system default.
            </summary>
        </member>
        <member name="F:RoboSharp.RoboSharpConfiguration.errorToken">
            <summary> field backing <see cref="P:RoboSharp.RoboSharpConfiguration.ErrorToken"/> property - Protected to allow DefaultConfig derived classes to set within constructor </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.ErrorTokenRegex">
            <summary>
            Regex to identify Error Tokens with during LogLine parsing
            </summary>
        </member>
        <member name="F:RoboSharp.RoboSharpConfiguration.errorTokenRegex">
            <summary> Field backing <see cref="P:RoboSharp.RoboSharpConfiguration.ErrorTokenRegex"/> property - Protected to allow DefaultConfig derived classes to set within constructor </summary>
        </member>
        <member name="M:RoboSharp.RoboSharpConfiguration.ErrorTokenRegexGenerator(System.String)">
            <summary>
            Generate a new ErrorTokenRegex object from by insterting the <see cref="P:RoboSharp.RoboSharpConfiguration.ErrorToken"/> into a standardized pattern.
            </summary>
            <param name="errorToken">Language Specific <see cref="P:RoboSharp.RoboSharpConfiguration.ErrorToken"/></param>
            <returns></returns>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_NewFile">
            <summary>
            Log Lines starting with this string indicate : New File -> Source FILE Exists, Destination does not
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_OlderFile">
            <summary>
            Log Lines starting with this string indicate : Destination File newer than Source
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_NewerFile">
            <summary>
            Log Lines starting with this string indicate : Source File newer than Destination
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_SameFile">
            <summary>
            Log Lines starting with this string indicate : Source FILE is identical to Destination File
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_ExtraFile">
            <summary>
            Log Lines starting with this string indicate : EXTRA FILE -> Destination Exists, but Source does not
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_MismatchFile">
            <summary>
            Log Lines starting with this string indicate : MISMATCH FILE
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_FailedFile">
            <summary>
            Log Lines starting with this string indicate : File Failed to Copy
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_FileExclusion">
            <summary>
            Log Lines starting with this string indicate : File was excluded by <see cref="P:RoboSharp.SelectionOptions.ExcludedFiles"/> filters
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_AttribExclusion">
            <summary>
            Log Lines starting with this string indicate : File was excluded by <see cref="P:RoboSharp.SelectionOptions.ExcludeAttributes"/> or <see cref="P:RoboSharp.SelectionOptions.IncludeAttributes"/> filters
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_MaxFileSizeExclusion">
            <summary>
            Log Lines starting with this string indicate : File was excluded by <see cref="P:RoboSharp.SelectionOptions.MaxFileSize"/> filters
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_MinFileSizeExclusion">
            <summary>
            Log Lines starting with this string indicate : File was excluded by <see cref="P:RoboSharp.SelectionOptions.MinFileSize"/> filters
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_MaxAgeOrAccessExclusion">
            <summary>
            Log Lines starting with this string indicate : File was excluded by <see cref="P:RoboSharp.SelectionOptions.MaxFileAge"/> or <see cref="P:RoboSharp.SelectionOptions.MaxLastAccessDate"/>filters
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_MinAgeOrAccessExclusion">
            <summary>
            Log Lines starting with this string indicate : File was excluded by <see cref="P:RoboSharp.SelectionOptions.MinFileAge"/> or <see cref="P:RoboSharp.SelectionOptions.MinLastAccessDate"/>filters
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_ChangedExclusion">
            <summary>
            Log Lines starting with this string indicate : File was excluded by <see cref="P:RoboSharp.SelectionOptions.ExcludeChanged"/> filters
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_TweakedInclusion">
            <summary>
            Log Lines starting with this string indicate : File was included by <see cref="P:RoboSharp.SelectionOptions.IncludeTweaked"/> filters
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_NewDir">
            <summary>
            Log Lines starting with this string indicate : New Dir -> Directory will be copied to Destination
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_ExtraDir">
            <summary>
            Log Lines starting with this string indicate : Extra Dir -> Does not exist in source
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_ExistingDir">
            <summary>
            Existing Dirs do not have an identifier on the line. Instead, this string will be used when creating the <see cref="T:RoboSharp.ProcessedFileInfo"/> object to indicate an Existing Directory.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.LogParsing_DirectoryExclusion">
            <summary>
            Log Lines starting with this string indicate : Folder was excluded by <see cref="P:RoboSharp.SelectionOptions.ExcludedDirectories"/> filters
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.RoboCopyExe">
            <summary>
            Specify the path to RoboCopy.exe here. If not set, use the default copy.
            </summary>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.StandardOutputEncoding">
            <Remarks>Default is retrieved from the OEMCodePage</Remarks>
            <inheritdoc cref="P:System.Diagnostics.ProcessStartInfo.StandardOutputEncoding" path="/summary"/>
        </member>
        <member name="P:RoboSharp.RoboSharpConfiguration.StandardErrorEncoding">
            <Remarks>Default is retrieved from the OEMCodePage</Remarks>
            <inheritdoc cref="P:System.Diagnostics.ProcessStartInfo.StandardErrorEncoding" path="/summary"/>
        </member>
        <member name="M:RoboSharp.RoboSharpConfiguration.GetDirectoryClass(RoboSharp.ProcessedDirectoryFlag)">
            <inheritdoc cref="M:RoboSharp.RoboSharpConfiguration.GetDirectoryClass(RoboSharp.ProcessedDirectoryFlag,RoboSharp.RoboSharpConfiguration)"/>
        </member>
        <member name="M:RoboSharp.RoboSharpConfiguration.GetFileClass(RoboSharp.ProcessedFileFlag)">
            <inheritdoc cref="M:RoboSharp.RoboSharpConfiguration.GetFileClass(RoboSharp.ProcessedFileFlag,RoboSharp.RoboSharpConfiguration)"/>
        </member>
        <member name="M:RoboSharp.RoboSharpConfiguration.GetDirectoryClass(RoboSharp.ProcessedDirectoryFlag,RoboSharp.RoboSharpConfiguration)">
            <summary> Get the string representing the enum from the configuration </summary>
            <param name="config">The configuration file to pull the log parsing string from</param>
            <param name="status">The status to look up from the configuration</param>
            <returns>The string from the config that is associated with this enum value</returns>
        </member>
        <member name="M:RoboSharp.RoboSharpConfiguration.GetFileClass(RoboSharp.ProcessedFileFlag,RoboSharp.RoboSharpConfiguration)">
            <summary> Get the string representing the enum from the configuration </summary>
            <param name="config">The configuration file to pull the log parsing string from</param>
            <param name="status">The status to look up from the configuration</param>
            <returns>The string from the config that is associated with this enum value</returns>
        </member>
        <member name="T:RoboSharp.SelectionFlags">
            <summary>
            Enum to define various selection options that can be toggled for the RoboCopy process.
            </summary>
        </member>
        <member name="F:RoboSharp.SelectionFlags.Default">
            <summary>
            Set RoboCopy options to their defaults
            </summary>
        </member>
        <member name="F:RoboSharp.SelectionFlags.ExcludeChanged">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.ExcludeChanged"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.ExcludeExtra">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.ExcludeExtra"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.ExcludeLonely">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.ExcludeLonely"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.ExcludeNewer">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.ExcludeNewer"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.ExcludeOlder">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.ExcludeOlder"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.ExcludeJunctionPoints">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.ExcludeJunctionPoints"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.ExcludeJunctionPointsForDirectories">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.ExcludeJunctionPointsForDirectories"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.ExcludeJunctionPointsForFiles">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.ExcludeJunctionPointsForFiles"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.IncludeSame">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.IncludeSame"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.IncludeTweaked">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.IncludeTweaked"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.OnlyCopyArchiveFiles">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.OnlyCopyArchiveFiles"/>
        </member>
        <member name="F:RoboSharp.SelectionFlags.OnlyCopyArchiveFilesAndResetArchiveFlag">
            <inheritdoc cref="P:RoboSharp.SelectionOptions.OnlyCopyArchiveFilesAndResetArchiveFlag"/>
        </member>
        <member name="T:RoboSharp.SelectionOptions">
            <summary>
            RoboCopy Switches that determine which folders and files are selected for copying/moving
            </summary>
            <remarks>
            <see href="https://github.com/tjscience/RoboSharp/wiki/SelectionOptions"/>
            </remarks>
        </member>
        <member name="M:RoboSharp.SelectionOptions.#ctor">
            <summary>
            Create new SelectionOptions with Default Settings
            </summary>
        </member>
        <member name="M:RoboSharp.SelectionOptions.#ctor(RoboSharp.SelectionFlags)">
            <summary>
            Create new SelectionOptions using the provided <paramref name="selectionFlags"/>
            </summary>
        </member>
        <member name="M:RoboSharp.SelectionOptions.#ctor(RoboSharp.SelectionOptions)">
            <summary>
            Clone a SelectionOptions Object
            </summary>
        </member>
        <member name="M:RoboSharp.SelectionOptions.Clone">
            <summary>
            Clone this SelectionOptions Object
            </summary>
        </member>
        <member name="F:RoboSharp.SelectionOptions.FileFolderNameRegexSplitter">
            <summary>
            This regex is used when the { <see cref="P:RoboSharp.SelectionOptions.ExcludeFiles"/> } and { <see cref="P:RoboSharp.SelectionOptions.ExcludeDirectories"/> } properties are set in order to split the input string to a List{string}
            </summary>
            <remarks>
            Regex Tester to use with <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String)"/> to get all the matches from a string.
            </remarks>
        </member>
        <member name="M:RoboSharp.SelectionOptions.ParseAndAddToList(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Use { <see cref="F:RoboSharp.SelectionOptions.FileFolderNameRegexSplitter"/> } to split the <paramref name="inputString"/>, then add the matches to the suppplied <paramref name="list"/>.
            </summary>
            <param name="inputString">String to perform <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String)"/> against</param>
            <param name="list">List to add regex matches to</param>
        </member>
        <member name="P:RoboSharp.SelectionOptions.OnlyCopyArchiveFiles">
            <summary>
            Copies only files for which the Archive attribute is set.
            [/A]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.OnlyCopyArchiveFilesAndResetArchiveFlag">
            <summary>
            Copies only files for which the Archive attribute is set, and resets the Archive attribute.
            [/M]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.IncludeAttributes">
            <summary>
            This property should be set to a string consisting of all the attributes to include (eg. AH; RASHCNETO).
            Includes only files for which any of the specified attributes are set.
            [/IA:attributes]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeAttributes">
            <summary>
            This property should be set to a string consisting of all the attributes to exclude (eg. AH; RASHCNETO).
            Excludes files for which any of the specified attributes are set.
            [/XA:attributes]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeFiles">
            <summary>
            Files should be separated by spaces.
            Excludes files that match the specified names or paths. Note that FileName can include wildcard characters (* and ?).
            [/XF File File ...]
            </summary>
            <remarks>
            This property is now backed by the ExcludedFiles List{String} property. <br/>
            Get -> Ensures all strings in { <see cref="P:RoboSharp.SelectionOptions.ExcludedFiles"/> } are wrapped in quotes if needed, and concats the items into a single string. <br/>
            Set -- Clears ExcludedFiles and splits this list using a regex to populate the list.
            </remarks>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludedFiles">
            <summary>
            Allows you to supply a set of files to copy or use wildcard characters (* or ?). <br/>
            JobOptions file saves these into the /IF (Include Files) section
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeDirectories">
            <summary>
            Directories should be separated by spaces.
            Excludes directories that match the specified names or paths.
            [/XD Directory Directory ...]
            </summary>
            <remarks>
            This property is now backed by the ExcludedDirectories List{String} property. <br/>
            Get -> Ensures all strings in { <see cref="P:RoboSharp.SelectionOptions.ExcludedDirectories"/> } are wrapped in quotes if needed, and concats the items into a single string. <br/>
            Set -> Clears ExcludedDirs and splits this list using a regex to populate the list.
            </remarks>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludedDirectories">
            <summary>
            Allows you to supply a set of files to copy or use wildcard characters (* or ?). <br/>
            JobOptions file saves these into the /IF (Include Files) section
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeChanged">
            <summary>
            Excludes changed files.
            [/XC]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeNewer">
            <summary>
            Excludes newer files.
            [/XN]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeOlder">
            <summary>
            Excludes older files.
            [/XO]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeExtra">
            <summary>
            Prevent logging of extra files and directories (items that exist in the destination but not the source)
            [/XX]
            </summary>
            <remarks>
            When used the /PURGE or /MIRROR, this will prevent deletion of the extra files/directories. ( default robocopy behavior )
            </remarks>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeLonely">
            <summary>
            Excludes lonely files and directories.
            [/XL]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.IncludeSame">
            <summary>
            Includes the same files.
            [/IS]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.IncludeTweaked">
            <summary>
            Includes tweaked files.
            [/IT]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.MaxFileSize">
            <summary>
            Zero indicates that this feature is turned off.
            Specifies the maximum file size (to exclude files bigger than N bytes).
            [/MAX:N]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.MinFileSize">
            <summary>
            Zero indicates that this feature is turned off.
            Specifies the minimum file size (to exclude files smaller than N bytes).
            [/MIN:N]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.MaxFileAge">
            <summary>
            Specifies the maximum file age (to exclude files older than N days or date).
            [/MAXAGE:N OR YYYYMMDD]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.MinFileAge">
            <summary>
            Specifies the minimum file age (exclude files newer than N days or date).
            [/MINAGE:N OR YYYYMMDD]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.MaxLastAccessDate">
            <summary>
            Specifies the maximum last access date (excludes files unused since Date).
            [/MAXLAD:YYYYMMDD]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.MinLastAccessDate">
            <summary>
            Specifies the minimum last access date (excludes files used since N) If N is less 
            than 1900, N specifies the number of days. Otherwise, N specifies a date 
            in the format YYYYMMDD.
            [/MINLAD:N or YYYYMMDD]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeJunctionPoints">
            <summary>
            Excludes junction points, which are normally included by default.
            [/XJ]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.UseFatFileTimes">
            <summary>
            Assumes FAT file times (two-second precision).
            [/FFT]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.CompensateForDstDifference">
            <summary>
            Compensates for one-hour DST time differences.
            [/DST]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeJunctionPointsForDirectories">
            <summary>
            Excludes junction points for directories.
            [/XJD]
            </summary>
        </member>
        <member name="P:RoboSharp.SelectionOptions.ExcludeJunctionPointsForFiles">
            <summary>
            Excludes junction points for files.
            [/XJF]
            </summary>
        </member>
        <member name="M:RoboSharp.SelectionOptions.SetIncludedAttributes(System.Nullable{System.IO.FileAttributes})">
            <summary>Set the <see cref="P:RoboSharp.SelectionOptions.IncludeAttributes"/> property </summary>
            <param name="AttributesToInclude"><inheritdoc cref="M:RoboSharp.SelectionOptions.ConvertFileAttrToString(System.Nullable{System.IO.FileAttributes})"/></param>
        </member>
        <member name="M:RoboSharp.SelectionOptions.SetExcludedAttributes(System.Nullable{System.IO.FileAttributes})">
            <summary>Set the <see cref="P:RoboSharp.SelectionOptions.ExcludeAttributes"/> property </summary>
            <param name="AttributesToExclude"><inheritdoc cref="M:RoboSharp.SelectionOptions.ConvertFileAttrToString(System.Nullable{System.IO.FileAttributes})"/></param>
        </member>
        <member name="M:RoboSharp.SelectionOptions.GetIncludedAttributes">
            <summary> Get the FileAttributes enum representation of <see cref="P:RoboSharp.SelectionOptions.IncludeAttributes"/></summary>
            <returns>If not specified, return null. Otherwise return the file attributes to include.</returns>
        </member>
        <member name="M:RoboSharp.SelectionOptions.GetExcludedAttributes">
            <summary> Get the FileAttributes enum representation of <see cref="P:RoboSharp.SelectionOptions.ExcludeAttributes"/></summary>
            <returns>If not specified, return null. Otherwise return the file attributes to include.</returns>
        </member>
        <member name="M:RoboSharp.SelectionOptions.ConvertFileAttrToString(System.Nullable{System.IO.FileAttributes})">
            <summary>
            Converts a <see cref="T:System.IO.FileAttributes"/> enum to its RASHCNETO string.
            </summary>
            <param name="attributes">
            Accepts: ReadOnly, Archive, System, Hidden, Compressed, NotContentIndexed, Encrypted, Temporary, Offline <br/>
            Ignores: All Other Attributes <br/>
            Pass in NULL value to return empty string.
            </param>
            <returns>RASHCNETO depending on submitted enum</returns>
        </member>
        <member name="M:RoboSharp.SelectionOptions.ConvertFileAttrStringToEnum(System.String)">
            <summary>
            Converts a RASHCNETO string to its <see cref="T:System.IO.FileAttributes"/> enum.
            </summary>
            <param name="attributes">
            Accepts: ReadOnly, Archive, System, Hidden, Compressed, NotContentIndexed, Encrypted, Temporary, Offline <br/>
            Ignores: All Other Attributes <br/>
            Pass in NULL value to return empty string.
            </param>
            <returns>If the string is parsable, returns the enum. Otherwise returns null.</returns>
        </member>
        <member name="M:RoboSharp.SelectionOptions.Parse(System.Boolean)">
            <summary>
            Parse the class properties and generate the command arguments
            </summary>
            <param name="optionsOnly">When <see langword="true"/> only returns the options tags, similar to how robocopy would display them. (omits the source/destination)</param>
        </member>
        <member name="M:RoboSharp.SelectionOptions.ToString">
            <summary>
            Returns the Parsed Options as it would be applied to RoboCopy
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoboSharp.SelectionOptions.Merge(RoboSharp.SelectionOptions)">
            <summary>
            Combine this object with another RetryOptions object. <br/>
            Any properties marked as true take priority. IEnumerable items are combined. <br/>
            String\Long Values will only be replaced if the primary object has a null/empty value for that property.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:RoboSharp.SelectionOptions.ApplySelectionFlags(RoboSharp.SelectionFlags)">
            <summary>
            Apply the <see cref="T:RoboSharp.SelectionFlags"/> to this command
            </summary>
            <param name="flags">Options to apply</param>
        </member>
        <member name="M:RoboSharp.SelectionOptions.GetSelectionFlags">
            <summary>
            Translate the selection bools of this object to its <see cref="T:RoboSharp.SelectionFlags"/> representation
            </summary>
            <returns>The <see cref="T:RoboSharp.SelectionFlags"/> representation of this object.</returns>
        </member>
        <member name="M:RoboSharp.VersionManager.RtlGetVersion(RoboSharp.VersionManager.OSVERSIONINFOEX@)">
            <summary>
            taken from https://stackoverflow.com/a/49641055
            </summary>
            <param name="versionInfo"></param>
            <returns></returns>
        </member>
        <member name="T:System.Threading.ThreadEx">
            <summary>
            Contains methods for CancelleableSleep and WaitUntil
            </summary>
        </member>
        <member name="M:System.Threading.ThreadEx.WaitUntil(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus)">
            <summary>
            Wait synchronously until this task has reached the specified <see cref="T:System.Threading.Tasks.TaskStatus"/>
            </summary>
        </member>
        <member name="M:System.Threading.ThreadEx.WaitUntilAsync(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus)">
            <summary>
            Wait asynchronously until this task has reached the specified <see cref="T:System.Threading.Tasks.TaskStatus"/> <br/>
            Checks every 100ms
            </summary>
        </member>
        <member name="M:System.Threading.ThreadEx.WaitUntilAsync(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.Int32)">
            <summary>
            Wait synchronously until this task has reached the specified <see cref="T:System.Threading.Tasks.TaskStatus"/><br/>
            Checks every <paramref name="interval"/> milliseconds
            </summary>
        </member>
        <member name="M:System.Threading.ThreadEx.CancellableSleep(System.TimeSpan,System.Threading.CancellationToken)">
            <param name="timeSpan">TimeSpan to sleep the thread</param>
            <param name="token"><inheritdoc cref="T:System.Threading.CancellationToken"/></param>
            <inheritdoc cref="M:System.Threading.ThreadEx.CancellableSleep(System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:System.Threading.ThreadEx.CancellableSleep(System.TimeSpan,System.Threading.CancellationToken[])">
            <inheritdoc cref="M:System.Threading.ThreadEx.CancellableSleep(System.Int32,System.Threading.CancellationToken[])"/>
            <inheritdoc cref="M:System.Threading.ThreadEx.CancellableSleep(System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:System.Threading.ThreadEx.CancellableSleep(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use await Task.Delay to sleep the thread. <br/>
            </summary>
            <returns>True if timer has expired (full duration slep), otherwise false.</returns>
            <param name="millisecondsTimeout">Number of milliseconds to wait"/></param>
            <param name="token"><inheritdoc cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:System.Threading.ThreadEx.CancellableSleep(System.Int32,System.Threading.CancellationToken[])">
            <summary>
            Use await Task.Delay to sleep the thread. <br/>
            Supplied tokens are used to create a LinkedToken that can cancel the sleep at any point.
            </summary>
            <returns>True if slept full duration, otherwise false.</returns>
            <param name="millisecondsTimeout">Number of milliseconds to wait"/></param>
            <param name="tokens">Use <see cref="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])"/> to create the token used to cancel the delay</param>
            <inheritdoc cref="M:System.Threading.ThreadEx.CancellableSleep(System.Int32,System.Threading.CancellationToken)"/>
        </member>
    </members>
</doc>
